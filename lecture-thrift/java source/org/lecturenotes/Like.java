/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.lecturenotes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Like {

  public interface Iface {

    public boolean setLike(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeAlreadySet, org.apache.thrift.TException;

    public boolean unsetLike(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeNotSet, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setLike(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unsetLike(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean setLike(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeAlreadySet, org.apache.thrift.TException
    {
      send_setLike(user, lectureId);
      return recv_setLike();
    }

    public void send_setLike(org.lecturenotes.types.Credentials user, String lectureId) throws org.apache.thrift.TException
    {
      setLike_args args = new setLike_args();
      args.setUser(user);
      args.setLectureId(lectureId);
      sendBase("setLike", args);
    }

    public boolean recv_setLike() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeAlreadySet, org.apache.thrift.TException
    {
      setLike_result result = new setLike_result();
      receiveBase(result, "setLike");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userNotFound != null) {
        throw result.userNotFound;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      if (result.likeAlreadySet != null) {
        throw result.likeAlreadySet;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setLike failed: unknown result");
    }

    public boolean unsetLike(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeNotSet, org.apache.thrift.TException
    {
      send_unsetLike(user, lectureId);
      return recv_unsetLike();
    }

    public void send_unsetLike(org.lecturenotes.types.Credentials user, String lectureId) throws org.apache.thrift.TException
    {
      unsetLike_args args = new unsetLike_args();
      args.setUser(user);
      args.setLectureId(lectureId);
      sendBase("unsetLike", args);
    }

    public boolean recv_unsetLike() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeNotSet, org.apache.thrift.TException
    {
      unsetLike_result result = new unsetLike_result();
      receiveBase(result, "unsetLike");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userNotFound != null) {
        throw result.userNotFound;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      if (result.likeNotSet != null) {
        throw result.likeNotSet;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unsetLike failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setLike(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setLike_call method_call = new setLike_call(user, lectureId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setLike_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.lecturenotes.types.Credentials user;
      private String lectureId;
      public setLike_call(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.lectureId = lectureId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setLike", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setLike_args args = new setLike_args();
        args.setUser(user);
        args.setLectureId(lectureId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeAlreadySet, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setLike();
      }
    }

    public void unsetLike(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unsetLike_call method_call = new unsetLike_call(user, lectureId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unsetLike_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.lecturenotes.types.Credentials user;
      private String lectureId;
      public unsetLike_call(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.lectureId = lectureId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unsetLike", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unsetLike_args args = new unsetLike_args();
        args.setUser(user);
        args.setLectureId(lectureId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.LikeNotSet, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unsetLike();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setLike", new setLike());
      processMap.put("unsetLike", new unsetLike());
      return processMap;
    }

    public static class setLike<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setLike_args> {
      public setLike() {
        super("setLike");
      }

      public setLike_args getEmptyArgsInstance() {
        return new setLike_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setLike_result getResult(I iface, setLike_args args) throws org.apache.thrift.TException {
        setLike_result result = new setLike_result();
        try {
          result.success = iface.setLike(args.user, args.lectureId);
          result.setSuccessIsSet(true);
        } catch (org.lecturenotes.exceptions.UserNotFound userNotFound) {
          result.userNotFound = userNotFound;
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        } catch (org.lecturenotes.exceptions.LikeAlreadySet likeAlreadySet) {
          result.likeAlreadySet = likeAlreadySet;
        }
        return result;
      }
    }

    public static class unsetLike<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unsetLike_args> {
      public unsetLike() {
        super("unsetLike");
      }

      public unsetLike_args getEmptyArgsInstance() {
        return new unsetLike_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unsetLike_result getResult(I iface, unsetLike_args args) throws org.apache.thrift.TException {
        unsetLike_result result = new unsetLike_result();
        try {
          result.success = iface.unsetLike(args.user, args.lectureId);
          result.setSuccessIsSet(true);
        } catch (org.lecturenotes.exceptions.UserNotFound userNotFound) {
          result.userNotFound = userNotFound;
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        } catch (org.lecturenotes.exceptions.LikeNotSet likeNotSet) {
          result.likeNotSet = likeNotSet;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setLike", new setLike());
      processMap.put("unsetLike", new unsetLike());
      return processMap;
    }

    public static class setLike<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setLike_args, Boolean> {
      public setLike() {
        super("setLike");
      }

      public setLike_args getEmptyArgsInstance() {
        return new setLike_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setLike_result result = new setLike_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setLike_result result = new setLike_result();
            if (e instanceof org.lecturenotes.exceptions.UserNotFound) {
                        result.userNotFound = (org.lecturenotes.exceptions.UserNotFound) e;
                        result.setUserNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.LikeAlreadySet) {
                        result.likeAlreadySet = (org.lecturenotes.exceptions.LikeAlreadySet) e;
                        result.setLikeAlreadySetIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setLike_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setLike(args.user, args.lectureId,resultHandler);
      }
    }

    public static class unsetLike<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unsetLike_args, Boolean> {
      public unsetLike() {
        super("unsetLike");
      }

      public unsetLike_args getEmptyArgsInstance() {
        return new unsetLike_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            unsetLike_result result = new unsetLike_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unsetLike_result result = new unsetLike_result();
            if (e instanceof org.lecturenotes.exceptions.UserNotFound) {
                        result.userNotFound = (org.lecturenotes.exceptions.UserNotFound) e;
                        result.setUserNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.LikeNotSet) {
                        result.likeNotSet = (org.lecturenotes.exceptions.LikeNotSet) e;
                        result.setLikeNotSetIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unsetLike_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.unsetLike(args.user, args.lectureId,resultHandler);
      }
    }

  }

  public static class setLike_args implements org.apache.thrift.TBase<setLike_args, setLike_args._Fields>, java.io.Serializable, Cloneable, Comparable<setLike_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLike_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLike_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLike_argsTupleSchemeFactory());
    }

    public org.lecturenotes.types.Credentials user; // required
    public String lectureId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      LECTURE_ID((short)2, "lectureId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // LECTURE_ID
            return LECTURE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLike_args.class, metaDataMap);
    }

    public setLike_args() {
    }

    public setLike_args(
      org.lecturenotes.types.Credentials user,
      String lectureId)
    {
      this();
      this.user = user;
      this.lectureId = lectureId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLike_args(setLike_args other) {
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
    }

    public setLike_args deepCopy() {
      return new setLike_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.lectureId = null;
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public setLike_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public setLike_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case LECTURE_ID:
        return getLectureId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case LECTURE_ID:
        return isSetLectureId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLike_args)
        return this.equals((setLike_args)that);
      return false;
    }

    public boolean equals(setLike_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLike_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLike_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLike_argsStandardSchemeFactory implements SchemeFactory {
      public setLike_argsStandardScheme getScheme() {
        return new setLike_argsStandardScheme();
      }
    }

    private static class setLike_argsStandardScheme extends StandardScheme<setLike_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLike_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLike_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLike_argsTupleSchemeFactory implements SchemeFactory {
      public setLike_argsTupleScheme getScheme() {
        return new setLike_argsTupleScheme();
      }
    }

    private static class setLike_argsTupleScheme extends TupleScheme<setLike_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetLectureId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
      }
    }

  }

  public static class setLike_result implements org.apache.thrift.TBase<setLike_result, setLike_result._Fields>, java.io.Serializable, Cloneable, Comparable<setLike_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLike_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField USER_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("userNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LIKE_ALREADY_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("likeAlreadySet", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLike_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLike_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.lecturenotes.exceptions.UserNotFound userNotFound; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required
    public org.lecturenotes.exceptions.LikeAlreadySet likeAlreadySet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_NOT_FOUND((short)1, "userNotFound"),
      LECTURE_NOT_FOUND((short)2, "lectureNotFound"),
      LIKE_ALREADY_SET((short)3, "likeAlreadySet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_NOT_FOUND
            return USER_NOT_FOUND;
          case 2: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          case 3: // LIKE_ALREADY_SET
            return LIKE_ALREADY_SET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.USER_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("userNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LIKE_ALREADY_SET, new org.apache.thrift.meta_data.FieldMetaData("likeAlreadySet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLike_result.class, metaDataMap);
    }

    public setLike_result() {
    }

    public setLike_result(
      boolean success,
      org.lecturenotes.exceptions.UserNotFound userNotFound,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound,
      org.lecturenotes.exceptions.LikeAlreadySet likeAlreadySet)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userNotFound = userNotFound;
      this.lectureNotFound = lectureNotFound;
      this.likeAlreadySet = likeAlreadySet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLike_result(setLike_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUserNotFound()) {
        this.userNotFound = new org.lecturenotes.exceptions.UserNotFound(other.userNotFound);
      }
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
      if (other.isSetLikeAlreadySet()) {
        this.likeAlreadySet = new org.lecturenotes.exceptions.LikeAlreadySet(other.likeAlreadySet);
      }
    }

    public setLike_result deepCopy() {
      return new setLike_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.userNotFound = null;
      this.lectureNotFound = null;
      this.likeAlreadySet = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setLike_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.lecturenotes.exceptions.UserNotFound getUserNotFound() {
      return this.userNotFound;
    }

    public setLike_result setUserNotFound(org.lecturenotes.exceptions.UserNotFound userNotFound) {
      this.userNotFound = userNotFound;
      return this;
    }

    public void unsetUserNotFound() {
      this.userNotFound = null;
    }

    /** Returns true if field userNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetUserNotFound() {
      return this.userNotFound != null;
    }

    public void setUserNotFoundIsSet(boolean value) {
      if (!value) {
        this.userNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public setLike_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.LikeAlreadySet getLikeAlreadySet() {
      return this.likeAlreadySet;
    }

    public setLike_result setLikeAlreadySet(org.lecturenotes.exceptions.LikeAlreadySet likeAlreadySet) {
      this.likeAlreadySet = likeAlreadySet;
      return this;
    }

    public void unsetLikeAlreadySet() {
      this.likeAlreadySet = null;
    }

    /** Returns true if field likeAlreadySet is set (has been assigned a value) and false otherwise */
    public boolean isSetLikeAlreadySet() {
      return this.likeAlreadySet != null;
    }

    public void setLikeAlreadySetIsSet(boolean value) {
      if (!value) {
        this.likeAlreadySet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case USER_NOT_FOUND:
        if (value == null) {
          unsetUserNotFound();
        } else {
          setUserNotFound((org.lecturenotes.exceptions.UserNotFound)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      case LIKE_ALREADY_SET:
        if (value == null) {
          unsetLikeAlreadySet();
        } else {
          setLikeAlreadySet((org.lecturenotes.exceptions.LikeAlreadySet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case USER_NOT_FOUND:
        return getUserNotFound();

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      case LIKE_ALREADY_SET:
        return getLikeAlreadySet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_NOT_FOUND:
        return isSetUserNotFound();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      case LIKE_ALREADY_SET:
        return isSetLikeAlreadySet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLike_result)
        return this.equals((setLike_result)that);
      return false;
    }

    public boolean equals(setLike_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userNotFound = true && this.isSetUserNotFound();
      boolean that_present_userNotFound = true && that.isSetUserNotFound();
      if (this_present_userNotFound || that_present_userNotFound) {
        if (!(this_present_userNotFound && that_present_userNotFound))
          return false;
        if (!this.userNotFound.equals(that.userNotFound))
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      boolean this_present_likeAlreadySet = true && this.isSetLikeAlreadySet();
      boolean that_present_likeAlreadySet = true && that.isSetLikeAlreadySet();
      if (this_present_likeAlreadySet || that_present_likeAlreadySet) {
        if (!(this_present_likeAlreadySet && that_present_likeAlreadySet))
          return false;
        if (!this.likeAlreadySet.equals(that.likeAlreadySet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLike_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserNotFound()).compareTo(other.isSetUserNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNotFound, other.userNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLikeAlreadySet()).compareTo(other.isSetLikeAlreadySet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLikeAlreadySet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likeAlreadySet, other.likeAlreadySet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLike_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userNotFound:");
      if (this.userNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.userNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("likeAlreadySet:");
      if (this.likeAlreadySet == null) {
        sb.append("null");
      } else {
        sb.append(this.likeAlreadySet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLike_resultStandardSchemeFactory implements SchemeFactory {
      public setLike_resultStandardScheme getScheme() {
        return new setLike_resultStandardScheme();
      }
    }

    private static class setLike_resultStandardScheme extends StandardScheme<setLike_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLike_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USER_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
                struct.userNotFound.read(iprot);
                struct.setUserNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIKE_ALREADY_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.likeAlreadySet = new org.lecturenotes.exceptions.LikeAlreadySet();
                struct.likeAlreadySet.read(iprot);
                struct.setLikeAlreadySetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLike_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.userNotFound != null) {
          oprot.writeFieldBegin(USER_NOT_FOUND_FIELD_DESC);
          struct.userNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.likeAlreadySet != null) {
          oprot.writeFieldBegin(LIKE_ALREADY_SET_FIELD_DESC);
          struct.likeAlreadySet.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLike_resultTupleSchemeFactory implements SchemeFactory {
      public setLike_resultTupleScheme getScheme() {
        return new setLike_resultTupleScheme();
      }
    }

    private static class setLike_resultTupleScheme extends TupleScheme<setLike_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUserNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetLikeAlreadySet()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUserNotFound()) {
          struct.userNotFound.write(oprot);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
        if (struct.isSetLikeAlreadySet()) {
          struct.likeAlreadySet.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
          struct.userNotFound.read(iprot);
          struct.setUserNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.likeAlreadySet = new org.lecturenotes.exceptions.LikeAlreadySet();
          struct.likeAlreadySet.read(iprot);
          struct.setLikeAlreadySetIsSet(true);
        }
      }
    }

  }

  public static class unsetLike_args implements org.apache.thrift.TBase<unsetLike_args, unsetLike_args._Fields>, java.io.Serializable, Cloneable, Comparable<unsetLike_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unsetLike_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unsetLike_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unsetLike_argsTupleSchemeFactory());
    }

    public org.lecturenotes.types.Credentials user; // required
    public String lectureId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      LECTURE_ID((short)2, "lectureId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // LECTURE_ID
            return LECTURE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unsetLike_args.class, metaDataMap);
    }

    public unsetLike_args() {
    }

    public unsetLike_args(
      org.lecturenotes.types.Credentials user,
      String lectureId)
    {
      this();
      this.user = user;
      this.lectureId = lectureId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsetLike_args(unsetLike_args other) {
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
    }

    public unsetLike_args deepCopy() {
      return new unsetLike_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.lectureId = null;
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public unsetLike_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public unsetLike_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case LECTURE_ID:
        return getLectureId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case LECTURE_ID:
        return isSetLectureId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsetLike_args)
        return this.equals((unsetLike_args)that);
      return false;
    }

    public boolean equals(unsetLike_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unsetLike_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unsetLike_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unsetLike_argsStandardSchemeFactory implements SchemeFactory {
      public unsetLike_argsStandardScheme getScheme() {
        return new unsetLike_argsStandardScheme();
      }
    }

    private static class unsetLike_argsStandardScheme extends StandardScheme<unsetLike_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unsetLike_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unsetLike_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unsetLike_argsTupleSchemeFactory implements SchemeFactory {
      public unsetLike_argsTupleScheme getScheme() {
        return new unsetLike_argsTupleScheme();
      }
    }

    private static class unsetLike_argsTupleScheme extends TupleScheme<unsetLike_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unsetLike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetLectureId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unsetLike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
      }
    }

  }

  public static class unsetLike_result implements org.apache.thrift.TBase<unsetLike_result, unsetLike_result._Fields>, java.io.Serializable, Cloneable, Comparable<unsetLike_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unsetLike_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField USER_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("userNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LIKE_NOT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("likeNotSet", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unsetLike_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unsetLike_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.lecturenotes.exceptions.UserNotFound userNotFound; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required
    public org.lecturenotes.exceptions.LikeNotSet likeNotSet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_NOT_FOUND((short)1, "userNotFound"),
      LECTURE_NOT_FOUND((short)2, "lectureNotFound"),
      LIKE_NOT_SET((short)3, "likeNotSet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_NOT_FOUND
            return USER_NOT_FOUND;
          case 2: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          case 3: // LIKE_NOT_SET
            return LIKE_NOT_SET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.USER_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("userNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LIKE_NOT_SET, new org.apache.thrift.meta_data.FieldMetaData("likeNotSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unsetLike_result.class, metaDataMap);
    }

    public unsetLike_result() {
    }

    public unsetLike_result(
      boolean success,
      org.lecturenotes.exceptions.UserNotFound userNotFound,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound,
      org.lecturenotes.exceptions.LikeNotSet likeNotSet)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userNotFound = userNotFound;
      this.lectureNotFound = lectureNotFound;
      this.likeNotSet = likeNotSet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsetLike_result(unsetLike_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUserNotFound()) {
        this.userNotFound = new org.lecturenotes.exceptions.UserNotFound(other.userNotFound);
      }
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
      if (other.isSetLikeNotSet()) {
        this.likeNotSet = new org.lecturenotes.exceptions.LikeNotSet(other.likeNotSet);
      }
    }

    public unsetLike_result deepCopy() {
      return new unsetLike_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.userNotFound = null;
      this.lectureNotFound = null;
      this.likeNotSet = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unsetLike_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.lecturenotes.exceptions.UserNotFound getUserNotFound() {
      return this.userNotFound;
    }

    public unsetLike_result setUserNotFound(org.lecturenotes.exceptions.UserNotFound userNotFound) {
      this.userNotFound = userNotFound;
      return this;
    }

    public void unsetUserNotFound() {
      this.userNotFound = null;
    }

    /** Returns true if field userNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetUserNotFound() {
      return this.userNotFound != null;
    }

    public void setUserNotFoundIsSet(boolean value) {
      if (!value) {
        this.userNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public unsetLike_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.LikeNotSet getLikeNotSet() {
      return this.likeNotSet;
    }

    public unsetLike_result setLikeNotSet(org.lecturenotes.exceptions.LikeNotSet likeNotSet) {
      this.likeNotSet = likeNotSet;
      return this;
    }

    public void unsetLikeNotSet() {
      this.likeNotSet = null;
    }

    /** Returns true if field likeNotSet is set (has been assigned a value) and false otherwise */
    public boolean isSetLikeNotSet() {
      return this.likeNotSet != null;
    }

    public void setLikeNotSetIsSet(boolean value) {
      if (!value) {
        this.likeNotSet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case USER_NOT_FOUND:
        if (value == null) {
          unsetUserNotFound();
        } else {
          setUserNotFound((org.lecturenotes.exceptions.UserNotFound)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      case LIKE_NOT_SET:
        if (value == null) {
          unsetLikeNotSet();
        } else {
          setLikeNotSet((org.lecturenotes.exceptions.LikeNotSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case USER_NOT_FOUND:
        return getUserNotFound();

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      case LIKE_NOT_SET:
        return getLikeNotSet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_NOT_FOUND:
        return isSetUserNotFound();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      case LIKE_NOT_SET:
        return isSetLikeNotSet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsetLike_result)
        return this.equals((unsetLike_result)that);
      return false;
    }

    public boolean equals(unsetLike_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userNotFound = true && this.isSetUserNotFound();
      boolean that_present_userNotFound = true && that.isSetUserNotFound();
      if (this_present_userNotFound || that_present_userNotFound) {
        if (!(this_present_userNotFound && that_present_userNotFound))
          return false;
        if (!this.userNotFound.equals(that.userNotFound))
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      boolean this_present_likeNotSet = true && this.isSetLikeNotSet();
      boolean that_present_likeNotSet = true && that.isSetLikeNotSet();
      if (this_present_likeNotSet || that_present_likeNotSet) {
        if (!(this_present_likeNotSet && that_present_likeNotSet))
          return false;
        if (!this.likeNotSet.equals(that.likeNotSet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unsetLike_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserNotFound()).compareTo(other.isSetUserNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNotFound, other.userNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLikeNotSet()).compareTo(other.isSetLikeNotSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLikeNotSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likeNotSet, other.likeNotSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unsetLike_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userNotFound:");
      if (this.userNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.userNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("likeNotSet:");
      if (this.likeNotSet == null) {
        sb.append("null");
      } else {
        sb.append(this.likeNotSet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unsetLike_resultStandardSchemeFactory implements SchemeFactory {
      public unsetLike_resultStandardScheme getScheme() {
        return new unsetLike_resultStandardScheme();
      }
    }

    private static class unsetLike_resultStandardScheme extends StandardScheme<unsetLike_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unsetLike_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USER_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
                struct.userNotFound.read(iprot);
                struct.setUserNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIKE_NOT_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.likeNotSet = new org.lecturenotes.exceptions.LikeNotSet();
                struct.likeNotSet.read(iprot);
                struct.setLikeNotSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unsetLike_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.userNotFound != null) {
          oprot.writeFieldBegin(USER_NOT_FOUND_FIELD_DESC);
          struct.userNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.likeNotSet != null) {
          oprot.writeFieldBegin(LIKE_NOT_SET_FIELD_DESC);
          struct.likeNotSet.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unsetLike_resultTupleSchemeFactory implements SchemeFactory {
      public unsetLike_resultTupleScheme getScheme() {
        return new unsetLike_resultTupleScheme();
      }
    }

    private static class unsetLike_resultTupleScheme extends TupleScheme<unsetLike_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unsetLike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUserNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetLikeNotSet()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUserNotFound()) {
          struct.userNotFound.write(oprot);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
        if (struct.isSetLikeNotSet()) {
          struct.likeNotSet.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unsetLike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
          struct.userNotFound.read(iprot);
          struct.setUserNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.likeNotSet = new org.lecturenotes.exceptions.LikeNotSet();
          struct.likeNotSet.read(iprot);
          struct.setLikeNotSetIsSet(true);
        }
      }
    }

  }

}
