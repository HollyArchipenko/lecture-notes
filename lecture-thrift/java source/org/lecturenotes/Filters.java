/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.lecturenotes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Filters {

  public interface Iface {

    public List<Integer> getYears() throws org.apache.thrift.TException;

    public List<String> getUniversities(int year) throws org.apache.thrift.TException;

    public List<String> getFaculties(int year, String university) throws org.apache.thrift.TException;

    public List<Integer> getCourses(int year, String university, String faculty) throws org.apache.thrift.TException;

    public List<Integer> getSemesters(int year, String university, String faculty, int course) throws org.apache.thrift.TException;

    public List<String> getSubjects(int year, String university, String faculty, int course, int semester) throws org.apache.thrift.TException;

    public List<String> getLecturers(int year, String university, String faculty, int course, int semester, String subject) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getYears(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUniversities(int year, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFaculties(int year, String university, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCourses(int year, String university, String faculty, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSemesters(int year, String university, String faculty, int course, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSubjects(int year, String university, String faculty, int course, int semester, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLecturers(int year, String university, String faculty, int course, int semester, String subject, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Integer> getYears() throws org.apache.thrift.TException
    {
      send_getYears();
      return recv_getYears();
    }

    public void send_getYears() throws org.apache.thrift.TException
    {
      getYears_args args = new getYears_args();
      sendBase("getYears", args);
    }

    public List<Integer> recv_getYears() throws org.apache.thrift.TException
    {
      getYears_result result = new getYears_result();
      receiveBase(result, "getYears");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getYears failed: unknown result");
    }

    public List<String> getUniversities(int year) throws org.apache.thrift.TException
    {
      send_getUniversities(year);
      return recv_getUniversities();
    }

    public void send_getUniversities(int year) throws org.apache.thrift.TException
    {
      getUniversities_args args = new getUniversities_args();
      args.setYear(year);
      sendBase("getUniversities", args);
    }

    public List<String> recv_getUniversities() throws org.apache.thrift.TException
    {
      getUniversities_result result = new getUniversities_result();
      receiveBase(result, "getUniversities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUniversities failed: unknown result");
    }

    public List<String> getFaculties(int year, String university) throws org.apache.thrift.TException
    {
      send_getFaculties(year, university);
      return recv_getFaculties();
    }

    public void send_getFaculties(int year, String university) throws org.apache.thrift.TException
    {
      getFaculties_args args = new getFaculties_args();
      args.setYear(year);
      args.setUniversity(university);
      sendBase("getFaculties", args);
    }

    public List<String> recv_getFaculties() throws org.apache.thrift.TException
    {
      getFaculties_result result = new getFaculties_result();
      receiveBase(result, "getFaculties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFaculties failed: unknown result");
    }

    public List<Integer> getCourses(int year, String university, String faculty) throws org.apache.thrift.TException
    {
      send_getCourses(year, university, faculty);
      return recv_getCourses();
    }

    public void send_getCourses(int year, String university, String faculty) throws org.apache.thrift.TException
    {
      getCourses_args args = new getCourses_args();
      args.setYear(year);
      args.setUniversity(university);
      args.setFaculty(faculty);
      sendBase("getCourses", args);
    }

    public List<Integer> recv_getCourses() throws org.apache.thrift.TException
    {
      getCourses_result result = new getCourses_result();
      receiveBase(result, "getCourses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCourses failed: unknown result");
    }

    public List<Integer> getSemesters(int year, String university, String faculty, int course) throws org.apache.thrift.TException
    {
      send_getSemesters(year, university, faculty, course);
      return recv_getSemesters();
    }

    public void send_getSemesters(int year, String university, String faculty, int course) throws org.apache.thrift.TException
    {
      getSemesters_args args = new getSemesters_args();
      args.setYear(year);
      args.setUniversity(university);
      args.setFaculty(faculty);
      args.setCourse(course);
      sendBase("getSemesters", args);
    }

    public List<Integer> recv_getSemesters() throws org.apache.thrift.TException
    {
      getSemesters_result result = new getSemesters_result();
      receiveBase(result, "getSemesters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSemesters failed: unknown result");
    }

    public List<String> getSubjects(int year, String university, String faculty, int course, int semester) throws org.apache.thrift.TException
    {
      send_getSubjects(year, university, faculty, course, semester);
      return recv_getSubjects();
    }

    public void send_getSubjects(int year, String university, String faculty, int course, int semester) throws org.apache.thrift.TException
    {
      getSubjects_args args = new getSubjects_args();
      args.setYear(year);
      args.setUniversity(university);
      args.setFaculty(faculty);
      args.setCourse(course);
      args.setSemester(semester);
      sendBase("getSubjects", args);
    }

    public List<String> recv_getSubjects() throws org.apache.thrift.TException
    {
      getSubjects_result result = new getSubjects_result();
      receiveBase(result, "getSubjects");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubjects failed: unknown result");
    }

    public List<String> getLecturers(int year, String university, String faculty, int course, int semester, String subject) throws org.apache.thrift.TException
    {
      send_getLecturers(year, university, faculty, course, semester, subject);
      return recv_getLecturers();
    }

    public void send_getLecturers(int year, String university, String faculty, int course, int semester, String subject) throws org.apache.thrift.TException
    {
      getLecturers_args args = new getLecturers_args();
      args.setYear(year);
      args.setUniversity(university);
      args.setFaculty(faculty);
      args.setCourse(course);
      args.setSemester(semester);
      args.setSubject(subject);
      sendBase("getLecturers", args);
    }

    public List<String> recv_getLecturers() throws org.apache.thrift.TException
    {
      getLecturers_result result = new getLecturers_result();
      receiveBase(result, "getLecturers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLecturers failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getYears(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getYears_call method_call = new getYears_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getYears_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getYears_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getYears", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getYears_args args = new getYears_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getYears();
      }
    }

    public void getUniversities(int year, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUniversities_call method_call = new getUniversities_call(year, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUniversities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int year;
      public getUniversities_call(int year, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUniversities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUniversities_args args = new getUniversities_args();
        args.setYear(year);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUniversities();
      }
    }

    public void getFaculties(int year, String university, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFaculties_call method_call = new getFaculties_call(year, university, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFaculties_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int year;
      private String university;
      public getFaculties_call(int year, String university, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
        this.university = university;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFaculties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFaculties_args args = new getFaculties_args();
        args.setYear(year);
        args.setUniversity(university);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFaculties();
      }
    }

    public void getCourses(int year, String university, String faculty, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCourses_call method_call = new getCourses_call(year, university, faculty, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCourses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int year;
      private String university;
      private String faculty;
      public getCourses_call(int year, String university, String faculty, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
        this.university = university;
        this.faculty = faculty;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCourses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCourses_args args = new getCourses_args();
        args.setYear(year);
        args.setUniversity(university);
        args.setFaculty(faculty);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCourses();
      }
    }

    public void getSemesters(int year, String university, String faculty, int course, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSemesters_call method_call = new getSemesters_call(year, university, faculty, course, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSemesters_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int year;
      private String university;
      private String faculty;
      private int course;
      public getSemesters_call(int year, String university, String faculty, int course, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
        this.university = university;
        this.faculty = faculty;
        this.course = course;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSemesters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSemesters_args args = new getSemesters_args();
        args.setYear(year);
        args.setUniversity(university);
        args.setFaculty(faculty);
        args.setCourse(course);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSemesters();
      }
    }

    public void getSubjects(int year, String university, String faculty, int course, int semester, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubjects_call method_call = new getSubjects_call(year, university, faculty, course, semester, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubjects_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int year;
      private String university;
      private String faculty;
      private int course;
      private int semester;
      public getSubjects_call(int year, String university, String faculty, int course, int semester, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
        this.university = university;
        this.faculty = faculty;
        this.course = course;
        this.semester = semester;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubjects", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubjects_args args = new getSubjects_args();
        args.setYear(year);
        args.setUniversity(university);
        args.setFaculty(faculty);
        args.setCourse(course);
        args.setSemester(semester);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubjects();
      }
    }

    public void getLecturers(int year, String university, String faculty, int course, int semester, String subject, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLecturers_call method_call = new getLecturers_call(year, university, faculty, course, semester, subject, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLecturers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int year;
      private String university;
      private String faculty;
      private int course;
      private int semester;
      private String subject;
      public getLecturers_call(int year, String university, String faculty, int course, int semester, String subject, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
        this.university = university;
        this.faculty = faculty;
        this.course = course;
        this.semester = semester;
        this.subject = subject;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLecturers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLecturers_args args = new getLecturers_args();
        args.setYear(year);
        args.setUniversity(university);
        args.setFaculty(faculty);
        args.setCourse(course);
        args.setSemester(semester);
        args.setSubject(subject);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLecturers();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getYears", new getYears());
      processMap.put("getUniversities", new getUniversities());
      processMap.put("getFaculties", new getFaculties());
      processMap.put("getCourses", new getCourses());
      processMap.put("getSemesters", new getSemesters());
      processMap.put("getSubjects", new getSubjects());
      processMap.put("getLecturers", new getLecturers());
      return processMap;
    }

    public static class getYears<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getYears_args> {
      public getYears() {
        super("getYears");
      }

      public getYears_args getEmptyArgsInstance() {
        return new getYears_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getYears_result getResult(I iface, getYears_args args) throws org.apache.thrift.TException {
        getYears_result result = new getYears_result();
        result.success = iface.getYears();
        return result;
      }
    }

    public static class getUniversities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUniversities_args> {
      public getUniversities() {
        super("getUniversities");
      }

      public getUniversities_args getEmptyArgsInstance() {
        return new getUniversities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUniversities_result getResult(I iface, getUniversities_args args) throws org.apache.thrift.TException {
        getUniversities_result result = new getUniversities_result();
        result.success = iface.getUniversities(args.year);
        return result;
      }
    }

    public static class getFaculties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFaculties_args> {
      public getFaculties() {
        super("getFaculties");
      }

      public getFaculties_args getEmptyArgsInstance() {
        return new getFaculties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFaculties_result getResult(I iface, getFaculties_args args) throws org.apache.thrift.TException {
        getFaculties_result result = new getFaculties_result();
        result.success = iface.getFaculties(args.year, args.university);
        return result;
      }
    }

    public static class getCourses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCourses_args> {
      public getCourses() {
        super("getCourses");
      }

      public getCourses_args getEmptyArgsInstance() {
        return new getCourses_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCourses_result getResult(I iface, getCourses_args args) throws org.apache.thrift.TException {
        getCourses_result result = new getCourses_result();
        result.success = iface.getCourses(args.year, args.university, args.faculty);
        return result;
      }
    }

    public static class getSemesters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSemesters_args> {
      public getSemesters() {
        super("getSemesters");
      }

      public getSemesters_args getEmptyArgsInstance() {
        return new getSemesters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSemesters_result getResult(I iface, getSemesters_args args) throws org.apache.thrift.TException {
        getSemesters_result result = new getSemesters_result();
        result.success = iface.getSemesters(args.year, args.university, args.faculty, args.course);
        return result;
      }
    }

    public static class getSubjects<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubjects_args> {
      public getSubjects() {
        super("getSubjects");
      }

      public getSubjects_args getEmptyArgsInstance() {
        return new getSubjects_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubjects_result getResult(I iface, getSubjects_args args) throws org.apache.thrift.TException {
        getSubjects_result result = new getSubjects_result();
        result.success = iface.getSubjects(args.year, args.university, args.faculty, args.course, args.semester);
        return result;
      }
    }

    public static class getLecturers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLecturers_args> {
      public getLecturers() {
        super("getLecturers");
      }

      public getLecturers_args getEmptyArgsInstance() {
        return new getLecturers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLecturers_result getResult(I iface, getLecturers_args args) throws org.apache.thrift.TException {
        getLecturers_result result = new getLecturers_result();
        result.success = iface.getLecturers(args.year, args.university, args.faculty, args.course, args.semester, args.subject);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getYears", new getYears());
      processMap.put("getUniversities", new getUniversities());
      processMap.put("getFaculties", new getFaculties());
      processMap.put("getCourses", new getCourses());
      processMap.put("getSemesters", new getSemesters());
      processMap.put("getSubjects", new getSubjects());
      processMap.put("getLecturers", new getLecturers());
      return processMap;
    }

    public static class getYears<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getYears_args, List<Integer>> {
      public getYears() {
        super("getYears");
      }

      public getYears_args getEmptyArgsInstance() {
        return new getYears_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getYears_result result = new getYears_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getYears_result result = new getYears_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getYears_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getYears(resultHandler);
      }
    }

    public static class getUniversities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUniversities_args, List<String>> {
      public getUniversities() {
        super("getUniversities");
      }

      public getUniversities_args getEmptyArgsInstance() {
        return new getUniversities_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getUniversities_result result = new getUniversities_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUniversities_result result = new getUniversities_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUniversities_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getUniversities(args.year,resultHandler);
      }
    }

    public static class getFaculties<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFaculties_args, List<String>> {
      public getFaculties() {
        super("getFaculties");
      }

      public getFaculties_args getEmptyArgsInstance() {
        return new getFaculties_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getFaculties_result result = new getFaculties_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFaculties_result result = new getFaculties_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFaculties_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getFaculties(args.year, args.university,resultHandler);
      }
    }

    public static class getCourses<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCourses_args, List<Integer>> {
      public getCourses() {
        super("getCourses");
      }

      public getCourses_args getEmptyArgsInstance() {
        return new getCourses_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getCourses_result result = new getCourses_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCourses_result result = new getCourses_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCourses_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getCourses(args.year, args.university, args.faculty,resultHandler);
      }
    }

    public static class getSemesters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSemesters_args, List<Integer>> {
      public getSemesters() {
        super("getSemesters");
      }

      public getSemesters_args getEmptyArgsInstance() {
        return new getSemesters_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getSemesters_result result = new getSemesters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSemesters_result result = new getSemesters_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSemesters_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getSemesters(args.year, args.university, args.faculty, args.course,resultHandler);
      }
    }

    public static class getSubjects<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubjects_args, List<String>> {
      public getSubjects() {
        super("getSubjects");
      }

      public getSubjects_args getEmptyArgsInstance() {
        return new getSubjects_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getSubjects_result result = new getSubjects_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSubjects_result result = new getSubjects_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubjects_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getSubjects(args.year, args.university, args.faculty, args.course, args.semester,resultHandler);
      }
    }

    public static class getLecturers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLecturers_args, List<String>> {
      public getLecturers() {
        super("getLecturers");
      }

      public getLecturers_args getEmptyArgsInstance() {
        return new getLecturers_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getLecturers_result result = new getLecturers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLecturers_result result = new getLecturers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLecturers_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getLecturers(args.year, args.university, args.faculty, args.course, args.semester, args.subject,resultHandler);
      }
    }

  }

  public static class getYears_args implements org.apache.thrift.TBase<getYears_args, getYears_args._Fields>, java.io.Serializable, Cloneable, Comparable<getYears_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getYears_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getYears_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getYears_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getYears_args.class, metaDataMap);
    }

    public getYears_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getYears_args(getYears_args other) {
    }

    public getYears_args deepCopy() {
      return new getYears_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getYears_args)
        return this.equals((getYears_args)that);
      return false;
    }

    public boolean equals(getYears_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getYears_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getYears_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getYears_argsStandardSchemeFactory implements SchemeFactory {
      public getYears_argsStandardScheme getScheme() {
        return new getYears_argsStandardScheme();
      }
    }

    private static class getYears_argsStandardScheme extends StandardScheme<getYears_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getYears_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getYears_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getYears_argsTupleSchemeFactory implements SchemeFactory {
      public getYears_argsTupleScheme getScheme() {
        return new getYears_argsTupleScheme();
      }
    }

    private static class getYears_argsTupleScheme extends TupleScheme<getYears_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getYears_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getYears_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getYears_result implements org.apache.thrift.TBase<getYears_result, getYears_result._Fields>, java.io.Serializable, Cloneable, Comparable<getYears_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getYears_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getYears_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getYears_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getYears_result.class, metaDataMap);
    }

    public getYears_result() {
    }

    public getYears_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getYears_result(getYears_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getYears_result deepCopy() {
      return new getYears_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getYears_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getYears_result)
        return this.equals((getYears_result)that);
      return false;
    }

    public boolean equals(getYears_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getYears_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getYears_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getYears_resultStandardSchemeFactory implements SchemeFactory {
      public getYears_resultStandardScheme getScheme() {
        return new getYears_resultStandardScheme();
      }
    }

    private static class getYears_resultStandardScheme extends StandardScheme<getYears_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getYears_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    int _elem26;
                    _elem26 = iprot.readI32();
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getYears_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter27 : struct.success)
            {
              oprot.writeI32(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getYears_resultTupleSchemeFactory implements SchemeFactory {
      public getYears_resultTupleScheme getScheme() {
        return new getYears_resultTupleScheme();
      }
    }

    private static class getYears_resultTupleScheme extends TupleScheme<getYears_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getYears_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter28 : struct.success)
            {
              oprot.writeI32(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getYears_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              int _elem31;
              _elem31 = iprot.readI32();
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUniversities_args implements org.apache.thrift.TBase<getUniversities_args, getUniversities_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUniversities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUniversities_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUniversities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUniversities_argsTupleSchemeFactory());
    }

    public int year; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YEAR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUniversities_args.class, metaDataMap);
    }

    public getUniversities_args() {
    }

    public getUniversities_args(
      int year)
    {
      this();
      this.year = year;
      setYearIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUniversities_args(getUniversities_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.year = other.year;
    }

    public getUniversities_args deepCopy() {
      return new getUniversities_args(this);
    }

    @Override
    public void clear() {
      setYearIsSet(false);
      this.year = 0;
    }

    public int getYear() {
      return this.year;
    }

    public getUniversities_args setYear(int year) {
      this.year = year;
      setYearIsSet(true);
      return this;
    }

    public void unsetYear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    public void setYearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return Integer.valueOf(getYear());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUniversities_args)
        return this.equals((getUniversities_args)that);
      return false;
    }

    public boolean equals(getUniversities_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true;
      boolean that_present_year = true;
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (this.year != that.year)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUniversities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUniversities_args(");
      boolean first = true;

      sb.append("year:");
      sb.append(this.year);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUniversities_argsStandardSchemeFactory implements SchemeFactory {
      public getUniversities_argsStandardScheme getScheme() {
        return new getUniversities_argsStandardScheme();
      }
    }

    private static class getUniversities_argsStandardScheme extends StandardScheme<getUniversities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUniversities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.year = iprot.readI32();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUniversities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeI32(struct.year);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUniversities_argsTupleSchemeFactory implements SchemeFactory {
      public getUniversities_argsTupleScheme getScheme() {
        return new getUniversities_argsTupleScheme();
      }
    }

    private static class getUniversities_argsTupleScheme extends TupleScheme<getUniversities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUniversities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetYear()) {
          oprot.writeI32(struct.year);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUniversities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.year = iprot.readI32();
          struct.setYearIsSet(true);
        }
      }
    }

  }

  public static class getUniversities_result implements org.apache.thrift.TBase<getUniversities_result, getUniversities_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUniversities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUniversities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUniversities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUniversities_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUniversities_result.class, metaDataMap);
    }

    public getUniversities_result() {
    }

    public getUniversities_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUniversities_result(getUniversities_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getUniversities_result deepCopy() {
      return new getUniversities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getUniversities_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUniversities_result)
        return this.equals((getUniversities_result)that);
      return false;
    }

    public boolean equals(getUniversities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUniversities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUniversities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUniversities_resultStandardSchemeFactory implements SchemeFactory {
      public getUniversities_resultStandardScheme getScheme() {
        return new getUniversities_resultStandardScheme();
      }
    }

    private static class getUniversities_resultStandardScheme extends StandardScheme<getUniversities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUniversities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    String _elem34;
                    _elem34 = iprot.readString();
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUniversities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter35 : struct.success)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUniversities_resultTupleSchemeFactory implements SchemeFactory {
      public getUniversities_resultTupleScheme getScheme() {
        return new getUniversities_resultTupleScheme();
      }
    }

    private static class getUniversities_resultTupleScheme extends TupleScheme<getUniversities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUniversities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter36 : struct.success)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUniversities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              String _elem39;
              _elem39 = iprot.readString();
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFaculties_args implements org.apache.thrift.TBase<getFaculties_args, getFaculties_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFaculties_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFaculties_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UNIVERSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("university", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFaculties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFaculties_argsTupleSchemeFactory());
    }

    public int year; // required
    public String university; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year"),
      UNIVERSITY((short)2, "university");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          case 2: // UNIVERSITY
            return UNIVERSITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YEAR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNIVERSITY, new org.apache.thrift.meta_data.FieldMetaData("university", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFaculties_args.class, metaDataMap);
    }

    public getFaculties_args() {
    }

    public getFaculties_args(
      int year,
      String university)
    {
      this();
      this.year = year;
      setYearIsSet(true);
      this.university = university;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFaculties_args(getFaculties_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.year = other.year;
      if (other.isSetUniversity()) {
        this.university = other.university;
      }
    }

    public getFaculties_args deepCopy() {
      return new getFaculties_args(this);
    }

    @Override
    public void clear() {
      setYearIsSet(false);
      this.year = 0;
      this.university = null;
    }

    public int getYear() {
      return this.year;
    }

    public getFaculties_args setYear(int year) {
      this.year = year;
      setYearIsSet(true);
      return this;
    }

    public void unsetYear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    public void setYearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
    }

    public String getUniversity() {
      return this.university;
    }

    public getFaculties_args setUniversity(String university) {
      this.university = university;
      return this;
    }

    public void unsetUniversity() {
      this.university = null;
    }

    /** Returns true if field university is set (has been assigned a value) and false otherwise */
    public boolean isSetUniversity() {
      return this.university != null;
    }

    public void setUniversityIsSet(boolean value) {
      if (!value) {
        this.university = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((Integer)value);
        }
        break;

      case UNIVERSITY:
        if (value == null) {
          unsetUniversity();
        } else {
          setUniversity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return Integer.valueOf(getYear());

      case UNIVERSITY:
        return getUniversity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      case UNIVERSITY:
        return isSetUniversity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFaculties_args)
        return this.equals((getFaculties_args)that);
      return false;
    }

    public boolean equals(getFaculties_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true;
      boolean that_present_year = true;
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (this.year != that.year)
          return false;
      }

      boolean this_present_university = true && this.isSetUniversity();
      boolean that_present_university = true && that.isSetUniversity();
      if (this_present_university || that_present_university) {
        if (!(this_present_university && that_present_university))
          return false;
        if (!this.university.equals(that.university))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFaculties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUniversity()).compareTo(other.isSetUniversity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniversity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.university, other.university);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFaculties_args(");
      boolean first = true;

      sb.append("year:");
      sb.append(this.year);
      first = false;
      if (!first) sb.append(", ");
      sb.append("university:");
      if (this.university == null) {
        sb.append("null");
      } else {
        sb.append(this.university);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFaculties_argsStandardSchemeFactory implements SchemeFactory {
      public getFaculties_argsStandardScheme getScheme() {
        return new getFaculties_argsStandardScheme();
      }
    }

    private static class getFaculties_argsStandardScheme extends StandardScheme<getFaculties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFaculties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.year = iprot.readI32();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIVERSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.university = iprot.readString();
                struct.setUniversityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFaculties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeI32(struct.year);
        oprot.writeFieldEnd();
        if (struct.university != null) {
          oprot.writeFieldBegin(UNIVERSITY_FIELD_DESC);
          oprot.writeString(struct.university);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFaculties_argsTupleSchemeFactory implements SchemeFactory {
      public getFaculties_argsTupleScheme getScheme() {
        return new getFaculties_argsTupleScheme();
      }
    }

    private static class getFaculties_argsTupleScheme extends TupleScheme<getFaculties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFaculties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        if (struct.isSetUniversity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetYear()) {
          oprot.writeI32(struct.year);
        }
        if (struct.isSetUniversity()) {
          oprot.writeString(struct.university);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFaculties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.year = iprot.readI32();
          struct.setYearIsSet(true);
        }
        if (incoming.get(1)) {
          struct.university = iprot.readString();
          struct.setUniversityIsSet(true);
        }
      }
    }

  }

  public static class getFaculties_result implements org.apache.thrift.TBase<getFaculties_result, getFaculties_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFaculties_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFaculties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFaculties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFaculties_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFaculties_result.class, metaDataMap);
    }

    public getFaculties_result() {
    }

    public getFaculties_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFaculties_result(getFaculties_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getFaculties_result deepCopy() {
      return new getFaculties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getFaculties_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFaculties_result)
        return this.equals((getFaculties_result)that);
      return false;
    }

    public boolean equals(getFaculties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFaculties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFaculties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFaculties_resultStandardSchemeFactory implements SchemeFactory {
      public getFaculties_resultStandardScheme getScheme() {
        return new getFaculties_resultStandardScheme();
      }
    }

    private static class getFaculties_resultStandardScheme extends StandardScheme<getFaculties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFaculties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    String _elem42;
                    _elem42 = iprot.readString();
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFaculties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter43 : struct.success)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFaculties_resultTupleSchemeFactory implements SchemeFactory {
      public getFaculties_resultTupleScheme getScheme() {
        return new getFaculties_resultTupleScheme();
      }
    }

    private static class getFaculties_resultTupleScheme extends TupleScheme<getFaculties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFaculties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter44 : struct.success)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFaculties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              String _elem47;
              _elem47 = iprot.readString();
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCourses_args implements org.apache.thrift.TBase<getCourses_args, getCourses_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCourses_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourses_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UNIVERSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("university", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FACULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("faculty", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourses_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourses_argsTupleSchemeFactory());
    }

    public int year; // required
    public String university; // required
    public String faculty; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year"),
      UNIVERSITY((short)2, "university"),
      FACULTY((short)3, "faculty");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          case 2: // UNIVERSITY
            return UNIVERSITY;
          case 3: // FACULTY
            return FACULTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YEAR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNIVERSITY, new org.apache.thrift.meta_data.FieldMetaData("university", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FACULTY, new org.apache.thrift.meta_data.FieldMetaData("faculty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourses_args.class, metaDataMap);
    }

    public getCourses_args() {
    }

    public getCourses_args(
      int year,
      String university,
      String faculty)
    {
      this();
      this.year = year;
      setYearIsSet(true);
      this.university = university;
      this.faculty = faculty;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourses_args(getCourses_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.year = other.year;
      if (other.isSetUniversity()) {
        this.university = other.university;
      }
      if (other.isSetFaculty()) {
        this.faculty = other.faculty;
      }
    }

    public getCourses_args deepCopy() {
      return new getCourses_args(this);
    }

    @Override
    public void clear() {
      setYearIsSet(false);
      this.year = 0;
      this.university = null;
      this.faculty = null;
    }

    public int getYear() {
      return this.year;
    }

    public getCourses_args setYear(int year) {
      this.year = year;
      setYearIsSet(true);
      return this;
    }

    public void unsetYear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    public void setYearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
    }

    public String getUniversity() {
      return this.university;
    }

    public getCourses_args setUniversity(String university) {
      this.university = university;
      return this;
    }

    public void unsetUniversity() {
      this.university = null;
    }

    /** Returns true if field university is set (has been assigned a value) and false otherwise */
    public boolean isSetUniversity() {
      return this.university != null;
    }

    public void setUniversityIsSet(boolean value) {
      if (!value) {
        this.university = null;
      }
    }

    public String getFaculty() {
      return this.faculty;
    }

    public getCourses_args setFaculty(String faculty) {
      this.faculty = faculty;
      return this;
    }

    public void unsetFaculty() {
      this.faculty = null;
    }

    /** Returns true if field faculty is set (has been assigned a value) and false otherwise */
    public boolean isSetFaculty() {
      return this.faculty != null;
    }

    public void setFacultyIsSet(boolean value) {
      if (!value) {
        this.faculty = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((Integer)value);
        }
        break;

      case UNIVERSITY:
        if (value == null) {
          unsetUniversity();
        } else {
          setUniversity((String)value);
        }
        break;

      case FACULTY:
        if (value == null) {
          unsetFaculty();
        } else {
          setFaculty((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return Integer.valueOf(getYear());

      case UNIVERSITY:
        return getUniversity();

      case FACULTY:
        return getFaculty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      case UNIVERSITY:
        return isSetUniversity();
      case FACULTY:
        return isSetFaculty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourses_args)
        return this.equals((getCourses_args)that);
      return false;
    }

    public boolean equals(getCourses_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true;
      boolean that_present_year = true;
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (this.year != that.year)
          return false;
      }

      boolean this_present_university = true && this.isSetUniversity();
      boolean that_present_university = true && that.isSetUniversity();
      if (this_present_university || that_present_university) {
        if (!(this_present_university && that_present_university))
          return false;
        if (!this.university.equals(that.university))
          return false;
      }

      boolean this_present_faculty = true && this.isSetFaculty();
      boolean that_present_faculty = true && that.isSetFaculty();
      if (this_present_faculty || that_present_faculty) {
        if (!(this_present_faculty && that_present_faculty))
          return false;
        if (!this.faculty.equals(that.faculty))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCourses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUniversity()).compareTo(other.isSetUniversity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniversity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.university, other.university);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaculty()).compareTo(other.isSetFaculty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaculty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faculty, other.faculty);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourses_args(");
      boolean first = true;

      sb.append("year:");
      sb.append(this.year);
      first = false;
      if (!first) sb.append(", ");
      sb.append("university:");
      if (this.university == null) {
        sb.append("null");
      } else {
        sb.append(this.university);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("faculty:");
      if (this.faculty == null) {
        sb.append("null");
      } else {
        sb.append(this.faculty);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourses_argsStandardSchemeFactory implements SchemeFactory {
      public getCourses_argsStandardScheme getScheme() {
        return new getCourses_argsStandardScheme();
      }
    }

    private static class getCourses_argsStandardScheme extends StandardScheme<getCourses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.year = iprot.readI32();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIVERSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.university = iprot.readString();
                struct.setUniversityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FACULTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.faculty = iprot.readString();
                struct.setFacultyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeI32(struct.year);
        oprot.writeFieldEnd();
        if (struct.university != null) {
          oprot.writeFieldBegin(UNIVERSITY_FIELD_DESC);
          oprot.writeString(struct.university);
          oprot.writeFieldEnd();
        }
        if (struct.faculty != null) {
          oprot.writeFieldBegin(FACULTY_FIELD_DESC);
          oprot.writeString(struct.faculty);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourses_argsTupleSchemeFactory implements SchemeFactory {
      public getCourses_argsTupleScheme getScheme() {
        return new getCourses_argsTupleScheme();
      }
    }

    private static class getCourses_argsTupleScheme extends TupleScheme<getCourses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        if (struct.isSetUniversity()) {
          optionals.set(1);
        }
        if (struct.isSetFaculty()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetYear()) {
          oprot.writeI32(struct.year);
        }
        if (struct.isSetUniversity()) {
          oprot.writeString(struct.university);
        }
        if (struct.isSetFaculty()) {
          oprot.writeString(struct.faculty);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.year = iprot.readI32();
          struct.setYearIsSet(true);
        }
        if (incoming.get(1)) {
          struct.university = iprot.readString();
          struct.setUniversityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.faculty = iprot.readString();
          struct.setFacultyIsSet(true);
        }
      }
    }

  }

  public static class getCourses_result implements org.apache.thrift.TBase<getCourses_result, getCourses_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCourses_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourses_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourses_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourses_result.class, metaDataMap);
    }

    public getCourses_result() {
    }

    public getCourses_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourses_result(getCourses_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getCourses_result deepCopy() {
      return new getCourses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getCourses_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourses_result)
        return this.equals((getCourses_result)that);
      return false;
    }

    public boolean equals(getCourses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCourses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourses_resultStandardSchemeFactory implements SchemeFactory {
      public getCourses_resultStandardScheme getScheme() {
        return new getCourses_resultStandardScheme();
      }
    }

    private static class getCourses_resultStandardScheme extends StandardScheme<getCourses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    int _elem50;
                    _elem50 = iprot.readI32();
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter51 : struct.success)
            {
              oprot.writeI32(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourses_resultTupleSchemeFactory implements SchemeFactory {
      public getCourses_resultTupleScheme getScheme() {
        return new getCourses_resultTupleScheme();
      }
    }

    private static class getCourses_resultTupleScheme extends TupleScheme<getCourses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter52 : struct.success)
            {
              oprot.writeI32(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              int _elem55;
              _elem55 = iprot.readI32();
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSemesters_args implements org.apache.thrift.TBase<getSemesters_args, getSemesters_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSemesters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSemesters_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UNIVERSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("university", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FACULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("faculty", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSemesters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSemesters_argsTupleSchemeFactory());
    }

    public int year; // required
    public String university; // required
    public String faculty; // required
    public int course; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year"),
      UNIVERSITY((short)2, "university"),
      FACULTY((short)3, "faculty"),
      COURSE((short)4, "course");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          case 2: // UNIVERSITY
            return UNIVERSITY;
          case 3: // FACULTY
            return FACULTY;
          case 4: // COURSE
            return COURSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YEAR_ISSET_ID = 0;
    private static final int __COURSE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNIVERSITY, new org.apache.thrift.meta_data.FieldMetaData("university", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FACULTY, new org.apache.thrift.meta_data.FieldMetaData("faculty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSemesters_args.class, metaDataMap);
    }

    public getSemesters_args() {
    }

    public getSemesters_args(
      int year,
      String university,
      String faculty,
      int course)
    {
      this();
      this.year = year;
      setYearIsSet(true);
      this.university = university;
      this.faculty = faculty;
      this.course = course;
      setCourseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSemesters_args(getSemesters_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.year = other.year;
      if (other.isSetUniversity()) {
        this.university = other.university;
      }
      if (other.isSetFaculty()) {
        this.faculty = other.faculty;
      }
      this.course = other.course;
    }

    public getSemesters_args deepCopy() {
      return new getSemesters_args(this);
    }

    @Override
    public void clear() {
      setYearIsSet(false);
      this.year = 0;
      this.university = null;
      this.faculty = null;
      setCourseIsSet(false);
      this.course = 0;
    }

    public int getYear() {
      return this.year;
    }

    public getSemesters_args setYear(int year) {
      this.year = year;
      setYearIsSet(true);
      return this;
    }

    public void unsetYear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    public void setYearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
    }

    public String getUniversity() {
      return this.university;
    }

    public getSemesters_args setUniversity(String university) {
      this.university = university;
      return this;
    }

    public void unsetUniversity() {
      this.university = null;
    }

    /** Returns true if field university is set (has been assigned a value) and false otherwise */
    public boolean isSetUniversity() {
      return this.university != null;
    }

    public void setUniversityIsSet(boolean value) {
      if (!value) {
        this.university = null;
      }
    }

    public String getFaculty() {
      return this.faculty;
    }

    public getSemesters_args setFaculty(String faculty) {
      this.faculty = faculty;
      return this;
    }

    public void unsetFaculty() {
      this.faculty = null;
    }

    /** Returns true if field faculty is set (has been assigned a value) and false otherwise */
    public boolean isSetFaculty() {
      return this.faculty != null;
    }

    public void setFacultyIsSet(boolean value) {
      if (!value) {
        this.faculty = null;
      }
    }

    public int getCourse() {
      return this.course;
    }

    public getSemesters_args setCourse(int course) {
      this.course = course;
      setCourseIsSet(true);
      return this;
    }

    public void unsetCourse() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSE_ISSET_ID);
    }

    /** Returns true if field course is set (has been assigned a value) and false otherwise */
    public boolean isSetCourse() {
      return EncodingUtils.testBit(__isset_bitfield, __COURSE_ISSET_ID);
    }

    public void setCourseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((Integer)value);
        }
        break;

      case UNIVERSITY:
        if (value == null) {
          unsetUniversity();
        } else {
          setUniversity((String)value);
        }
        break;

      case FACULTY:
        if (value == null) {
          unsetFaculty();
        } else {
          setFaculty((String)value);
        }
        break;

      case COURSE:
        if (value == null) {
          unsetCourse();
        } else {
          setCourse((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return Integer.valueOf(getYear());

      case UNIVERSITY:
        return getUniversity();

      case FACULTY:
        return getFaculty();

      case COURSE:
        return Integer.valueOf(getCourse());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      case UNIVERSITY:
        return isSetUniversity();
      case FACULTY:
        return isSetFaculty();
      case COURSE:
        return isSetCourse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSemesters_args)
        return this.equals((getSemesters_args)that);
      return false;
    }

    public boolean equals(getSemesters_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true;
      boolean that_present_year = true;
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (this.year != that.year)
          return false;
      }

      boolean this_present_university = true && this.isSetUniversity();
      boolean that_present_university = true && that.isSetUniversity();
      if (this_present_university || that_present_university) {
        if (!(this_present_university && that_present_university))
          return false;
        if (!this.university.equals(that.university))
          return false;
      }

      boolean this_present_faculty = true && this.isSetFaculty();
      boolean that_present_faculty = true && that.isSetFaculty();
      if (this_present_faculty || that_present_faculty) {
        if (!(this_present_faculty && that_present_faculty))
          return false;
        if (!this.faculty.equals(that.faculty))
          return false;
      }

      boolean this_present_course = true;
      boolean that_present_course = true;
      if (this_present_course || that_present_course) {
        if (!(this_present_course && that_present_course))
          return false;
        if (this.course != that.course)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSemesters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUniversity()).compareTo(other.isSetUniversity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniversity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.university, other.university);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaculty()).compareTo(other.isSetFaculty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaculty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faculty, other.faculty);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourse()).compareTo(other.isSetCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, other.course);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSemesters_args(");
      boolean first = true;

      sb.append("year:");
      sb.append(this.year);
      first = false;
      if (!first) sb.append(", ");
      sb.append("university:");
      if (this.university == null) {
        sb.append("null");
      } else {
        sb.append(this.university);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("faculty:");
      if (this.faculty == null) {
        sb.append("null");
      } else {
        sb.append(this.faculty);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("course:");
      sb.append(this.course);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSemesters_argsStandardSchemeFactory implements SchemeFactory {
      public getSemesters_argsStandardScheme getScheme() {
        return new getSemesters_argsStandardScheme();
      }
    }

    private static class getSemesters_argsStandardScheme extends StandardScheme<getSemesters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSemesters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.year = iprot.readI32();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIVERSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.university = iprot.readString();
                struct.setUniversityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FACULTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.faculty = iprot.readString();
                struct.setFacultyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.course = iprot.readI32();
                struct.setCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSemesters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeI32(struct.year);
        oprot.writeFieldEnd();
        if (struct.university != null) {
          oprot.writeFieldBegin(UNIVERSITY_FIELD_DESC);
          oprot.writeString(struct.university);
          oprot.writeFieldEnd();
        }
        if (struct.faculty != null) {
          oprot.writeFieldBegin(FACULTY_FIELD_DESC);
          oprot.writeString(struct.faculty);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COURSE_FIELD_DESC);
        oprot.writeI32(struct.course);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSemesters_argsTupleSchemeFactory implements SchemeFactory {
      public getSemesters_argsTupleScheme getScheme() {
        return new getSemesters_argsTupleScheme();
      }
    }

    private static class getSemesters_argsTupleScheme extends TupleScheme<getSemesters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSemesters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        if (struct.isSetUniversity()) {
          optionals.set(1);
        }
        if (struct.isSetFaculty()) {
          optionals.set(2);
        }
        if (struct.isSetCourse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetYear()) {
          oprot.writeI32(struct.year);
        }
        if (struct.isSetUniversity()) {
          oprot.writeString(struct.university);
        }
        if (struct.isSetFaculty()) {
          oprot.writeString(struct.faculty);
        }
        if (struct.isSetCourse()) {
          oprot.writeI32(struct.course);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSemesters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.year = iprot.readI32();
          struct.setYearIsSet(true);
        }
        if (incoming.get(1)) {
          struct.university = iprot.readString();
          struct.setUniversityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.faculty = iprot.readString();
          struct.setFacultyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.course = iprot.readI32();
          struct.setCourseIsSet(true);
        }
      }
    }

  }

  public static class getSemesters_result implements org.apache.thrift.TBase<getSemesters_result, getSemesters_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSemesters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSemesters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSemesters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSemesters_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSemesters_result.class, metaDataMap);
    }

    public getSemesters_result() {
    }

    public getSemesters_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSemesters_result(getSemesters_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getSemesters_result deepCopy() {
      return new getSemesters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getSemesters_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSemesters_result)
        return this.equals((getSemesters_result)that);
      return false;
    }

    public boolean equals(getSemesters_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSemesters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSemesters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSemesters_resultStandardSchemeFactory implements SchemeFactory {
      public getSemesters_resultStandardScheme getScheme() {
        return new getSemesters_resultStandardScheme();
      }
    }

    private static class getSemesters_resultStandardScheme extends StandardScheme<getSemesters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSemesters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    int _elem58;
                    _elem58 = iprot.readI32();
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSemesters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter59 : struct.success)
            {
              oprot.writeI32(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSemesters_resultTupleSchemeFactory implements SchemeFactory {
      public getSemesters_resultTupleScheme getScheme() {
        return new getSemesters_resultTupleScheme();
      }
    }

    private static class getSemesters_resultTupleScheme extends TupleScheme<getSemesters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSemesters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter60 : struct.success)
            {
              oprot.writeI32(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSemesters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              int _elem63;
              _elem63 = iprot.readI32();
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSubjects_args implements org.apache.thrift.TBase<getSubjects_args, getSubjects_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubjects_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubjects_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UNIVERSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("university", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FACULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("faculty", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SEMESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("semester", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubjects_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubjects_argsTupleSchemeFactory());
    }

    public int year; // required
    public String university; // required
    public String faculty; // required
    public int course; // required
    public int semester; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year"),
      UNIVERSITY((short)2, "university"),
      FACULTY((short)3, "faculty"),
      COURSE((short)4, "course"),
      SEMESTER((short)5, "semester");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          case 2: // UNIVERSITY
            return UNIVERSITY;
          case 3: // FACULTY
            return FACULTY;
          case 4: // COURSE
            return COURSE;
          case 5: // SEMESTER
            return SEMESTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YEAR_ISSET_ID = 0;
    private static final int __COURSE_ISSET_ID = 1;
    private static final int __SEMESTER_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNIVERSITY, new org.apache.thrift.meta_data.FieldMetaData("university", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FACULTY, new org.apache.thrift.meta_data.FieldMetaData("faculty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEMESTER, new org.apache.thrift.meta_data.FieldMetaData("semester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubjects_args.class, metaDataMap);
    }

    public getSubjects_args() {
    }

    public getSubjects_args(
      int year,
      String university,
      String faculty,
      int course,
      int semester)
    {
      this();
      this.year = year;
      setYearIsSet(true);
      this.university = university;
      this.faculty = faculty;
      this.course = course;
      setCourseIsSet(true);
      this.semester = semester;
      setSemesterIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubjects_args(getSubjects_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.year = other.year;
      if (other.isSetUniversity()) {
        this.university = other.university;
      }
      if (other.isSetFaculty()) {
        this.faculty = other.faculty;
      }
      this.course = other.course;
      this.semester = other.semester;
    }

    public getSubjects_args deepCopy() {
      return new getSubjects_args(this);
    }

    @Override
    public void clear() {
      setYearIsSet(false);
      this.year = 0;
      this.university = null;
      this.faculty = null;
      setCourseIsSet(false);
      this.course = 0;
      setSemesterIsSet(false);
      this.semester = 0;
    }

    public int getYear() {
      return this.year;
    }

    public getSubjects_args setYear(int year) {
      this.year = year;
      setYearIsSet(true);
      return this;
    }

    public void unsetYear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    public void setYearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
    }

    public String getUniversity() {
      return this.university;
    }

    public getSubjects_args setUniversity(String university) {
      this.university = university;
      return this;
    }

    public void unsetUniversity() {
      this.university = null;
    }

    /** Returns true if field university is set (has been assigned a value) and false otherwise */
    public boolean isSetUniversity() {
      return this.university != null;
    }

    public void setUniversityIsSet(boolean value) {
      if (!value) {
        this.university = null;
      }
    }

    public String getFaculty() {
      return this.faculty;
    }

    public getSubjects_args setFaculty(String faculty) {
      this.faculty = faculty;
      return this;
    }

    public void unsetFaculty() {
      this.faculty = null;
    }

    /** Returns true if field faculty is set (has been assigned a value) and false otherwise */
    public boolean isSetFaculty() {
      return this.faculty != null;
    }

    public void setFacultyIsSet(boolean value) {
      if (!value) {
        this.faculty = null;
      }
    }

    public int getCourse() {
      return this.course;
    }

    public getSubjects_args setCourse(int course) {
      this.course = course;
      setCourseIsSet(true);
      return this;
    }

    public void unsetCourse() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSE_ISSET_ID);
    }

    /** Returns true if field course is set (has been assigned a value) and false otherwise */
    public boolean isSetCourse() {
      return EncodingUtils.testBit(__isset_bitfield, __COURSE_ISSET_ID);
    }

    public void setCourseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSE_ISSET_ID, value);
    }

    public int getSemester() {
      return this.semester;
    }

    public getSubjects_args setSemester(int semester) {
      this.semester = semester;
      setSemesterIsSet(true);
      return this;
    }

    public void unsetSemester() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEMESTER_ISSET_ID);
    }

    /** Returns true if field semester is set (has been assigned a value) and false otherwise */
    public boolean isSetSemester() {
      return EncodingUtils.testBit(__isset_bitfield, __SEMESTER_ISSET_ID);
    }

    public void setSemesterIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEMESTER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((Integer)value);
        }
        break;

      case UNIVERSITY:
        if (value == null) {
          unsetUniversity();
        } else {
          setUniversity((String)value);
        }
        break;

      case FACULTY:
        if (value == null) {
          unsetFaculty();
        } else {
          setFaculty((String)value);
        }
        break;

      case COURSE:
        if (value == null) {
          unsetCourse();
        } else {
          setCourse((Integer)value);
        }
        break;

      case SEMESTER:
        if (value == null) {
          unsetSemester();
        } else {
          setSemester((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return Integer.valueOf(getYear());

      case UNIVERSITY:
        return getUniversity();

      case FACULTY:
        return getFaculty();

      case COURSE:
        return Integer.valueOf(getCourse());

      case SEMESTER:
        return Integer.valueOf(getSemester());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      case UNIVERSITY:
        return isSetUniversity();
      case FACULTY:
        return isSetFaculty();
      case COURSE:
        return isSetCourse();
      case SEMESTER:
        return isSetSemester();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubjects_args)
        return this.equals((getSubjects_args)that);
      return false;
    }

    public boolean equals(getSubjects_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true;
      boolean that_present_year = true;
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (this.year != that.year)
          return false;
      }

      boolean this_present_university = true && this.isSetUniversity();
      boolean that_present_university = true && that.isSetUniversity();
      if (this_present_university || that_present_university) {
        if (!(this_present_university && that_present_university))
          return false;
        if (!this.university.equals(that.university))
          return false;
      }

      boolean this_present_faculty = true && this.isSetFaculty();
      boolean that_present_faculty = true && that.isSetFaculty();
      if (this_present_faculty || that_present_faculty) {
        if (!(this_present_faculty && that_present_faculty))
          return false;
        if (!this.faculty.equals(that.faculty))
          return false;
      }

      boolean this_present_course = true;
      boolean that_present_course = true;
      if (this_present_course || that_present_course) {
        if (!(this_present_course && that_present_course))
          return false;
        if (this.course != that.course)
          return false;
      }

      boolean this_present_semester = true;
      boolean that_present_semester = true;
      if (this_present_semester || that_present_semester) {
        if (!(this_present_semester && that_present_semester))
          return false;
        if (this.semester != that.semester)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSubjects_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUniversity()).compareTo(other.isSetUniversity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniversity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.university, other.university);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaculty()).compareTo(other.isSetFaculty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaculty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faculty, other.faculty);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourse()).compareTo(other.isSetCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, other.course);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSemester()).compareTo(other.isSetSemester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSemester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semester, other.semester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubjects_args(");
      boolean first = true;

      sb.append("year:");
      sb.append(this.year);
      first = false;
      if (!first) sb.append(", ");
      sb.append("university:");
      if (this.university == null) {
        sb.append("null");
      } else {
        sb.append(this.university);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("faculty:");
      if (this.faculty == null) {
        sb.append("null");
      } else {
        sb.append(this.faculty);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("course:");
      sb.append(this.course);
      first = false;
      if (!first) sb.append(", ");
      sb.append("semester:");
      sb.append(this.semester);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubjects_argsStandardSchemeFactory implements SchemeFactory {
      public getSubjects_argsStandardScheme getScheme() {
        return new getSubjects_argsStandardScheme();
      }
    }

    private static class getSubjects_argsStandardScheme extends StandardScheme<getSubjects_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.year = iprot.readI32();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIVERSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.university = iprot.readString();
                struct.setUniversityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FACULTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.faculty = iprot.readString();
                struct.setFacultyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.course = iprot.readI32();
                struct.setCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SEMESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.semester = iprot.readI32();
                struct.setSemesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubjects_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeI32(struct.year);
        oprot.writeFieldEnd();
        if (struct.university != null) {
          oprot.writeFieldBegin(UNIVERSITY_FIELD_DESC);
          oprot.writeString(struct.university);
          oprot.writeFieldEnd();
        }
        if (struct.faculty != null) {
          oprot.writeFieldBegin(FACULTY_FIELD_DESC);
          oprot.writeString(struct.faculty);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COURSE_FIELD_DESC);
        oprot.writeI32(struct.course);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEMESTER_FIELD_DESC);
        oprot.writeI32(struct.semester);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubjects_argsTupleSchemeFactory implements SchemeFactory {
      public getSubjects_argsTupleScheme getScheme() {
        return new getSubjects_argsTupleScheme();
      }
    }

    private static class getSubjects_argsTupleScheme extends TupleScheme<getSubjects_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        if (struct.isSetUniversity()) {
          optionals.set(1);
        }
        if (struct.isSetFaculty()) {
          optionals.set(2);
        }
        if (struct.isSetCourse()) {
          optionals.set(3);
        }
        if (struct.isSetSemester()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetYear()) {
          oprot.writeI32(struct.year);
        }
        if (struct.isSetUniversity()) {
          oprot.writeString(struct.university);
        }
        if (struct.isSetFaculty()) {
          oprot.writeString(struct.faculty);
        }
        if (struct.isSetCourse()) {
          oprot.writeI32(struct.course);
        }
        if (struct.isSetSemester()) {
          oprot.writeI32(struct.semester);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.year = iprot.readI32();
          struct.setYearIsSet(true);
        }
        if (incoming.get(1)) {
          struct.university = iprot.readString();
          struct.setUniversityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.faculty = iprot.readString();
          struct.setFacultyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.course = iprot.readI32();
          struct.setCourseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.semester = iprot.readI32();
          struct.setSemesterIsSet(true);
        }
      }
    }

  }

  public static class getSubjects_result implements org.apache.thrift.TBase<getSubjects_result, getSubjects_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubjects_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubjects_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubjects_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubjects_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubjects_result.class, metaDataMap);
    }

    public getSubjects_result() {
    }

    public getSubjects_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubjects_result(getSubjects_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getSubjects_result deepCopy() {
      return new getSubjects_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getSubjects_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubjects_result)
        return this.equals((getSubjects_result)that);
      return false;
    }

    public boolean equals(getSubjects_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSubjects_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubjects_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubjects_resultStandardSchemeFactory implements SchemeFactory {
      public getSubjects_resultStandardScheme getScheme() {
        return new getSubjects_resultStandardScheme();
      }
    }

    private static class getSubjects_resultStandardScheme extends StandardScheme<getSubjects_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    String _elem66;
                    _elem66 = iprot.readString();
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubjects_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter67 : struct.success)
            {
              oprot.writeString(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubjects_resultTupleSchemeFactory implements SchemeFactory {
      public getSubjects_resultTupleScheme getScheme() {
        return new getSubjects_resultTupleScheme();
      }
    }

    private static class getSubjects_resultTupleScheme extends TupleScheme<getSubjects_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter68 : struct.success)
            {
              oprot.writeString(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              String _elem71;
              _elem71 = iprot.readString();
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLecturers_args implements org.apache.thrift.TBase<getLecturers_args, getLecturers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLecturers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLecturers_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UNIVERSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("university", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FACULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("faculty", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SEMESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("semester", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLecturers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLecturers_argsTupleSchemeFactory());
    }

    public int year; // required
    public String university; // required
    public String faculty; // required
    public int course; // required
    public int semester; // required
    public String subject; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year"),
      UNIVERSITY((short)2, "university"),
      FACULTY((short)3, "faculty"),
      COURSE((short)4, "course"),
      SEMESTER((short)5, "semester"),
      SUBJECT((short)6, "subject");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          case 2: // UNIVERSITY
            return UNIVERSITY;
          case 3: // FACULTY
            return FACULTY;
          case 4: // COURSE
            return COURSE;
          case 5: // SEMESTER
            return SEMESTER;
          case 6: // SUBJECT
            return SUBJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __YEAR_ISSET_ID = 0;
    private static final int __COURSE_ISSET_ID = 1;
    private static final int __SEMESTER_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNIVERSITY, new org.apache.thrift.meta_data.FieldMetaData("university", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FACULTY, new org.apache.thrift.meta_data.FieldMetaData("faculty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEMESTER, new org.apache.thrift.meta_data.FieldMetaData("semester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLecturers_args.class, metaDataMap);
    }

    public getLecturers_args() {
    }

    public getLecturers_args(
      int year,
      String university,
      String faculty,
      int course,
      int semester,
      String subject)
    {
      this();
      this.year = year;
      setYearIsSet(true);
      this.university = university;
      this.faculty = faculty;
      this.course = course;
      setCourseIsSet(true);
      this.semester = semester;
      setSemesterIsSet(true);
      this.subject = subject;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLecturers_args(getLecturers_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.year = other.year;
      if (other.isSetUniversity()) {
        this.university = other.university;
      }
      if (other.isSetFaculty()) {
        this.faculty = other.faculty;
      }
      this.course = other.course;
      this.semester = other.semester;
      if (other.isSetSubject()) {
        this.subject = other.subject;
      }
    }

    public getLecturers_args deepCopy() {
      return new getLecturers_args(this);
    }

    @Override
    public void clear() {
      setYearIsSet(false);
      this.year = 0;
      this.university = null;
      this.faculty = null;
      setCourseIsSet(false);
      this.course = 0;
      setSemesterIsSet(false);
      this.semester = 0;
      this.subject = null;
    }

    public int getYear() {
      return this.year;
    }

    public getLecturers_args setYear(int year) {
      this.year = year;
      setYearIsSet(true);
      return this;
    }

    public void unsetYear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
    }

    public void setYearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
    }

    public String getUniversity() {
      return this.university;
    }

    public getLecturers_args setUniversity(String university) {
      this.university = university;
      return this;
    }

    public void unsetUniversity() {
      this.university = null;
    }

    /** Returns true if field university is set (has been assigned a value) and false otherwise */
    public boolean isSetUniversity() {
      return this.university != null;
    }

    public void setUniversityIsSet(boolean value) {
      if (!value) {
        this.university = null;
      }
    }

    public String getFaculty() {
      return this.faculty;
    }

    public getLecturers_args setFaculty(String faculty) {
      this.faculty = faculty;
      return this;
    }

    public void unsetFaculty() {
      this.faculty = null;
    }

    /** Returns true if field faculty is set (has been assigned a value) and false otherwise */
    public boolean isSetFaculty() {
      return this.faculty != null;
    }

    public void setFacultyIsSet(boolean value) {
      if (!value) {
        this.faculty = null;
      }
    }

    public int getCourse() {
      return this.course;
    }

    public getLecturers_args setCourse(int course) {
      this.course = course;
      setCourseIsSet(true);
      return this;
    }

    public void unsetCourse() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSE_ISSET_ID);
    }

    /** Returns true if field course is set (has been assigned a value) and false otherwise */
    public boolean isSetCourse() {
      return EncodingUtils.testBit(__isset_bitfield, __COURSE_ISSET_ID);
    }

    public void setCourseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSE_ISSET_ID, value);
    }

    public int getSemester() {
      return this.semester;
    }

    public getLecturers_args setSemester(int semester) {
      this.semester = semester;
      setSemesterIsSet(true);
      return this;
    }

    public void unsetSemester() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEMESTER_ISSET_ID);
    }

    /** Returns true if field semester is set (has been assigned a value) and false otherwise */
    public boolean isSetSemester() {
      return EncodingUtils.testBit(__isset_bitfield, __SEMESTER_ISSET_ID);
    }

    public void setSemesterIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEMESTER_ISSET_ID, value);
    }

    public String getSubject() {
      return this.subject;
    }

    public getLecturers_args setSubject(String subject) {
      this.subject = subject;
      return this;
    }

    public void unsetSubject() {
      this.subject = null;
    }

    /** Returns true if field subject is set (has been assigned a value) and false otherwise */
    public boolean isSetSubject() {
      return this.subject != null;
    }

    public void setSubjectIsSet(boolean value) {
      if (!value) {
        this.subject = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((Integer)value);
        }
        break;

      case UNIVERSITY:
        if (value == null) {
          unsetUniversity();
        } else {
          setUniversity((String)value);
        }
        break;

      case FACULTY:
        if (value == null) {
          unsetFaculty();
        } else {
          setFaculty((String)value);
        }
        break;

      case COURSE:
        if (value == null) {
          unsetCourse();
        } else {
          setCourse((Integer)value);
        }
        break;

      case SEMESTER:
        if (value == null) {
          unsetSemester();
        } else {
          setSemester((Integer)value);
        }
        break;

      case SUBJECT:
        if (value == null) {
          unsetSubject();
        } else {
          setSubject((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return Integer.valueOf(getYear());

      case UNIVERSITY:
        return getUniversity();

      case FACULTY:
        return getFaculty();

      case COURSE:
        return Integer.valueOf(getCourse());

      case SEMESTER:
        return Integer.valueOf(getSemester());

      case SUBJECT:
        return getSubject();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      case UNIVERSITY:
        return isSetUniversity();
      case FACULTY:
        return isSetFaculty();
      case COURSE:
        return isSetCourse();
      case SEMESTER:
        return isSetSemester();
      case SUBJECT:
        return isSetSubject();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLecturers_args)
        return this.equals((getLecturers_args)that);
      return false;
    }

    public boolean equals(getLecturers_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true;
      boolean that_present_year = true;
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (this.year != that.year)
          return false;
      }

      boolean this_present_university = true && this.isSetUniversity();
      boolean that_present_university = true && that.isSetUniversity();
      if (this_present_university || that_present_university) {
        if (!(this_present_university && that_present_university))
          return false;
        if (!this.university.equals(that.university))
          return false;
      }

      boolean this_present_faculty = true && this.isSetFaculty();
      boolean that_present_faculty = true && that.isSetFaculty();
      if (this_present_faculty || that_present_faculty) {
        if (!(this_present_faculty && that_present_faculty))
          return false;
        if (!this.faculty.equals(that.faculty))
          return false;
      }

      boolean this_present_course = true;
      boolean that_present_course = true;
      if (this_present_course || that_present_course) {
        if (!(this_present_course && that_present_course))
          return false;
        if (this.course != that.course)
          return false;
      }

      boolean this_present_semester = true;
      boolean that_present_semester = true;
      if (this_present_semester || that_present_semester) {
        if (!(this_present_semester && that_present_semester))
          return false;
        if (this.semester != that.semester)
          return false;
      }

      boolean this_present_subject = true && this.isSetSubject();
      boolean that_present_subject = true && that.isSetSubject();
      if (this_present_subject || that_present_subject) {
        if (!(this_present_subject && that_present_subject))
          return false;
        if (!this.subject.equals(that.subject))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLecturers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUniversity()).compareTo(other.isSetUniversity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniversity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.university, other.university);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaculty()).compareTo(other.isSetFaculty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaculty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faculty, other.faculty);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourse()).compareTo(other.isSetCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, other.course);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSemester()).compareTo(other.isSetSemester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSemester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semester, other.semester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLecturers_args(");
      boolean first = true;

      sb.append("year:");
      sb.append(this.year);
      first = false;
      if (!first) sb.append(", ");
      sb.append("university:");
      if (this.university == null) {
        sb.append("null");
      } else {
        sb.append(this.university);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("faculty:");
      if (this.faculty == null) {
        sb.append("null");
      } else {
        sb.append(this.faculty);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("course:");
      sb.append(this.course);
      first = false;
      if (!first) sb.append(", ");
      sb.append("semester:");
      sb.append(this.semester);
      first = false;
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLecturers_argsStandardSchemeFactory implements SchemeFactory {
      public getLecturers_argsStandardScheme getScheme() {
        return new getLecturers_argsStandardScheme();
      }
    }

    private static class getLecturers_argsStandardScheme extends StandardScheme<getLecturers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLecturers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.year = iprot.readI32();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIVERSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.university = iprot.readString();
                struct.setUniversityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FACULTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.faculty = iprot.readString();
                struct.setFacultyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.course = iprot.readI32();
                struct.setCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SEMESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.semester = iprot.readI32();
                struct.setSemesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SUBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subject = iprot.readString();
                struct.setSubjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLecturers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeI32(struct.year);
        oprot.writeFieldEnd();
        if (struct.university != null) {
          oprot.writeFieldBegin(UNIVERSITY_FIELD_DESC);
          oprot.writeString(struct.university);
          oprot.writeFieldEnd();
        }
        if (struct.faculty != null) {
          oprot.writeFieldBegin(FACULTY_FIELD_DESC);
          oprot.writeString(struct.faculty);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COURSE_FIELD_DESC);
        oprot.writeI32(struct.course);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEMESTER_FIELD_DESC);
        oprot.writeI32(struct.semester);
        oprot.writeFieldEnd();
        if (struct.subject != null) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLecturers_argsTupleSchemeFactory implements SchemeFactory {
      public getLecturers_argsTupleScheme getScheme() {
        return new getLecturers_argsTupleScheme();
      }
    }

    private static class getLecturers_argsTupleScheme extends TupleScheme<getLecturers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLecturers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        if (struct.isSetUniversity()) {
          optionals.set(1);
        }
        if (struct.isSetFaculty()) {
          optionals.set(2);
        }
        if (struct.isSetCourse()) {
          optionals.set(3);
        }
        if (struct.isSetSemester()) {
          optionals.set(4);
        }
        if (struct.isSetSubject()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetYear()) {
          oprot.writeI32(struct.year);
        }
        if (struct.isSetUniversity()) {
          oprot.writeString(struct.university);
        }
        if (struct.isSetFaculty()) {
          oprot.writeString(struct.faculty);
        }
        if (struct.isSetCourse()) {
          oprot.writeI32(struct.course);
        }
        if (struct.isSetSemester()) {
          oprot.writeI32(struct.semester);
        }
        if (struct.isSetSubject()) {
          oprot.writeString(struct.subject);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLecturers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.year = iprot.readI32();
          struct.setYearIsSet(true);
        }
        if (incoming.get(1)) {
          struct.university = iprot.readString();
          struct.setUniversityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.faculty = iprot.readString();
          struct.setFacultyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.course = iprot.readI32();
          struct.setCourseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.semester = iprot.readI32();
          struct.setSemesterIsSet(true);
        }
        if (incoming.get(5)) {
          struct.subject = iprot.readString();
          struct.setSubjectIsSet(true);
        }
      }
    }

  }

  public static class getLecturers_result implements org.apache.thrift.TBase<getLecturers_result, getLecturers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLecturers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLecturers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLecturers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLecturers_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLecturers_result.class, metaDataMap);
    }

    public getLecturers_result() {
    }

    public getLecturers_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLecturers_result(getLecturers_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getLecturers_result deepCopy() {
      return new getLecturers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getLecturers_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLecturers_result)
        return this.equals((getLecturers_result)that);
      return false;
    }

    public boolean equals(getLecturers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLecturers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLecturers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLecturers_resultStandardSchemeFactory implements SchemeFactory {
      public getLecturers_resultStandardScheme getScheme() {
        return new getLecturers_resultStandardScheme();
      }
    }

    private static class getLecturers_resultStandardScheme extends StandardScheme<getLecturers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLecturers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    String _elem74;
                    _elem74 = iprot.readString();
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLecturers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter75 : struct.success)
            {
              oprot.writeString(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLecturers_resultTupleSchemeFactory implements SchemeFactory {
      public getLecturers_resultTupleScheme getScheme() {
        return new getLecturers_resultTupleScheme();
      }
    }

    private static class getLecturers_resultTupleScheme extends TupleScheme<getLecturers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLecturers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter76 : struct.success)
            {
              oprot.writeString(_iter76);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLecturers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              String _elem79;
              _elem79 = iprot.readString();
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
