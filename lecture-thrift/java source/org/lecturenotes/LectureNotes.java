/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.lecturenotes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LectureNotes {

  public interface Iface {

    public String createLecture(org.lecturenotes.types.Course course, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.CourseExist, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException;

    public String addImagesToLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException;

    public String removeImagesFromLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException;

    public boolean removeLecture(String lectureId, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException;

    public org.lecturenotes.types.Lecture getLecture(String lectureId) throws org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createLecture(org.lecturenotes.types.Course course, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addImagesToLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeImagesFromLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeLecture(String lectureId, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLecture(String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createLecture(org.lecturenotes.types.Course course, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.CourseExist, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      send_createLecture(course, user);
      return recv_createLecture();
    }

    public void send_createLecture(org.lecturenotes.types.Course course, org.lecturenotes.types.Credentials user) throws org.apache.thrift.TException
    {
      createLecture_args args = new createLecture_args();
      args.setCourse(course);
      args.setUser(user);
      sendBase("createLecture", args);
    }

    public String recv_createLecture() throws org.lecturenotes.exceptions.CourseExist, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      createLecture_result result = new createLecture_result();
      receiveBase(result, "createLecture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exist != null) {
        throw result.exist;
      }
      if (result.UserHasNoAccess != null) {
        throw result.UserHasNoAccess;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLecture failed: unknown result");
    }

    public String addImagesToLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      send_addImagesToLecture(lectureId, images, user);
      return recv_addImagesToLecture();
    }

    public void send_addImagesToLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user) throws org.apache.thrift.TException
    {
      addImagesToLecture_args args = new addImagesToLecture_args();
      args.setLectureId(lectureId);
      args.setImages(images);
      args.setUser(user);
      sendBase("addImagesToLecture", args);
    }

    public String recv_addImagesToLecture() throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      addImagesToLecture_result result = new addImagesToLecture_result();
      receiveBase(result, "addImagesToLecture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      if (result.UserHasNoAccess != null) {
        throw result.UserHasNoAccess;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addImagesToLecture failed: unknown result");
    }

    public String removeImagesFromLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      send_removeImagesFromLecture(lectureId, images, user);
      return recv_removeImagesFromLecture();
    }

    public void send_removeImagesFromLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user) throws org.apache.thrift.TException
    {
      removeImagesFromLecture_args args = new removeImagesFromLecture_args();
      args.setLectureId(lectureId);
      args.setImages(images);
      args.setUser(user);
      sendBase("removeImagesFromLecture", args);
    }

    public String recv_removeImagesFromLecture() throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      removeImagesFromLecture_result result = new removeImagesFromLecture_result();
      receiveBase(result, "removeImagesFromLecture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      if (result.UserHasNoAccess != null) {
        throw result.UserHasNoAccess;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeImagesFromLecture failed: unknown result");
    }

    public boolean removeLecture(String lectureId, org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      send_removeLecture(lectureId, user);
      return recv_removeLecture();
    }

    public void send_removeLecture(String lectureId, org.lecturenotes.types.Credentials user) throws org.apache.thrift.TException
    {
      removeLecture_args args = new removeLecture_args();
      args.setLectureId(lectureId);
      args.setUser(user);
      sendBase("removeLecture", args);
    }

    public boolean recv_removeLecture() throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException
    {
      removeLecture_result result = new removeLecture_result();
      receiveBase(result, "removeLecture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      if (result.UserHasNoAccess != null) {
        throw result.UserHasNoAccess;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeLecture failed: unknown result");
    }

    public org.lecturenotes.types.Lecture getLecture(String lectureId) throws org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException
    {
      send_getLecture(lectureId);
      return recv_getLecture();
    }

    public void send_getLecture(String lectureId) throws org.apache.thrift.TException
    {
      getLecture_args args = new getLecture_args();
      args.setLectureId(lectureId);
      sendBase("getLecture", args);
    }

    public org.lecturenotes.types.Lecture recv_getLecture() throws org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException
    {
      getLecture_result result = new getLecture_result();
      receiveBase(result, "getLecture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLecture failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createLecture(org.lecturenotes.types.Course course, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLecture_call method_call = new createLecture_call(course, user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLecture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.lecturenotes.types.Course course;
      private org.lecturenotes.types.Credentials user;
      public createLecture_call(org.lecturenotes.types.Course course, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.course = course;
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLecture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLecture_args args = new createLecture_args();
        args.setCourse(course);
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.lecturenotes.exceptions.CourseExist, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLecture();
      }
    }

    public void addImagesToLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addImagesToLecture_call method_call = new addImagesToLecture_call(lectureId, images, user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addImagesToLecture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lectureId;
      private List<String> images;
      private org.lecturenotes.types.Credentials user;
      public addImagesToLecture_call(String lectureId, List<String> images, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.images = images;
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addImagesToLecture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addImagesToLecture_args args = new addImagesToLecture_args();
        args.setLectureId(lectureId);
        args.setImages(images);
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addImagesToLecture();
      }
    }

    public void removeImagesFromLecture(String lectureId, List<String> images, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeImagesFromLecture_call method_call = new removeImagesFromLecture_call(lectureId, images, user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeImagesFromLecture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lectureId;
      private List<String> images;
      private org.lecturenotes.types.Credentials user;
      public removeImagesFromLecture_call(String lectureId, List<String> images, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.images = images;
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeImagesFromLecture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeImagesFromLecture_args args = new removeImagesFromLecture_args();
        args.setLectureId(lectureId);
        args.setImages(images);
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeImagesFromLecture();
      }
    }

    public void removeLecture(String lectureId, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeLecture_call method_call = new removeLecture_call(lectureId, user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeLecture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lectureId;
      private org.lecturenotes.types.Credentials user;
      public removeLecture_call(String lectureId, org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeLecture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeLecture_args args = new removeLecture_args();
        args.setLectureId(lectureId);
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.lecturenotes.exceptions.LectureNotFound, org.lecturenotes.exceptions.UserHasNoAccess, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeLecture();
      }
    }

    public void getLecture(String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLecture_call method_call = new getLecture_call(lectureId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLecture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lectureId;
      public getLecture_call(String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lectureId = lectureId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLecture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLecture_args args = new getLecture_args();
        args.setLectureId(lectureId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.lecturenotes.types.Lecture getResult() throws org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLecture();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createLecture", new createLecture());
      processMap.put("addImagesToLecture", new addImagesToLecture());
      processMap.put("removeImagesFromLecture", new removeImagesFromLecture());
      processMap.put("removeLecture", new removeLecture());
      processMap.put("getLecture", new getLecture());
      return processMap;
    }

    public static class createLecture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLecture_args> {
      public createLecture() {
        super("createLecture");
      }

      public createLecture_args getEmptyArgsInstance() {
        return new createLecture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLecture_result getResult(I iface, createLecture_args args) throws org.apache.thrift.TException {
        createLecture_result result = new createLecture_result();
        try {
          result.success = iface.createLecture(args.course, args.user);
        } catch (org.lecturenotes.exceptions.CourseExist exist) {
          result.exist = exist;
        } catch (org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
          result.UserHasNoAccess = UserHasNoAccess;
        }
        return result;
      }
    }

    public static class addImagesToLecture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addImagesToLecture_args> {
      public addImagesToLecture() {
        super("addImagesToLecture");
      }

      public addImagesToLecture_args getEmptyArgsInstance() {
        return new addImagesToLecture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addImagesToLecture_result getResult(I iface, addImagesToLecture_args args) throws org.apache.thrift.TException {
        addImagesToLecture_result result = new addImagesToLecture_result();
        try {
          result.success = iface.addImagesToLecture(args.lectureId, args.images, args.user);
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        } catch (org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
          result.UserHasNoAccess = UserHasNoAccess;
        }
        return result;
      }
    }

    public static class removeImagesFromLecture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeImagesFromLecture_args> {
      public removeImagesFromLecture() {
        super("removeImagesFromLecture");
      }

      public removeImagesFromLecture_args getEmptyArgsInstance() {
        return new removeImagesFromLecture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeImagesFromLecture_result getResult(I iface, removeImagesFromLecture_args args) throws org.apache.thrift.TException {
        removeImagesFromLecture_result result = new removeImagesFromLecture_result();
        try {
          result.success = iface.removeImagesFromLecture(args.lectureId, args.images, args.user);
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        } catch (org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
          result.UserHasNoAccess = UserHasNoAccess;
        }
        return result;
      }
    }

    public static class removeLecture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeLecture_args> {
      public removeLecture() {
        super("removeLecture");
      }

      public removeLecture_args getEmptyArgsInstance() {
        return new removeLecture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeLecture_result getResult(I iface, removeLecture_args args) throws org.apache.thrift.TException {
        removeLecture_result result = new removeLecture_result();
        try {
          result.success = iface.removeLecture(args.lectureId, args.user);
          result.setSuccessIsSet(true);
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        } catch (org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
          result.UserHasNoAccess = UserHasNoAccess;
        }
        return result;
      }
    }

    public static class getLecture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLecture_args> {
      public getLecture() {
        super("getLecture");
      }

      public getLecture_args getEmptyArgsInstance() {
        return new getLecture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLecture_result getResult(I iface, getLecture_args args) throws org.apache.thrift.TException {
        getLecture_result result = new getLecture_result();
        try {
          result.success = iface.getLecture(args.lectureId);
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createLecture", new createLecture());
      processMap.put("addImagesToLecture", new addImagesToLecture());
      processMap.put("removeImagesFromLecture", new removeImagesFromLecture());
      processMap.put("removeLecture", new removeLecture());
      processMap.put("getLecture", new getLecture());
      return processMap;
    }

    public static class createLecture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLecture_args, String> {
      public createLecture() {
        super("createLecture");
      }

      public createLecture_args getEmptyArgsInstance() {
        return new createLecture_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createLecture_result result = new createLecture_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createLecture_result result = new createLecture_result();
            if (e instanceof org.lecturenotes.exceptions.CourseExist) {
                        result.exist = (org.lecturenotes.exceptions.CourseExist) e;
                        result.setExistIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.UserHasNoAccess) {
                        result.UserHasNoAccess = (org.lecturenotes.exceptions.UserHasNoAccess) e;
                        result.setUserHasNoAccessIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLecture_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createLecture(args.course, args.user,resultHandler);
      }
    }

    public static class addImagesToLecture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addImagesToLecture_args, String> {
      public addImagesToLecture() {
        super("addImagesToLecture");
      }

      public addImagesToLecture_args getEmptyArgsInstance() {
        return new addImagesToLecture_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addImagesToLecture_result result = new addImagesToLecture_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addImagesToLecture_result result = new addImagesToLecture_result();
            if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.UserHasNoAccess) {
                        result.UserHasNoAccess = (org.lecturenotes.exceptions.UserHasNoAccess) e;
                        result.setUserHasNoAccessIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addImagesToLecture_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addImagesToLecture(args.lectureId, args.images, args.user,resultHandler);
      }
    }

    public static class removeImagesFromLecture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeImagesFromLecture_args, String> {
      public removeImagesFromLecture() {
        super("removeImagesFromLecture");
      }

      public removeImagesFromLecture_args getEmptyArgsInstance() {
        return new removeImagesFromLecture_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            removeImagesFromLecture_result result = new removeImagesFromLecture_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeImagesFromLecture_result result = new removeImagesFromLecture_result();
            if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.UserHasNoAccess) {
                        result.UserHasNoAccess = (org.lecturenotes.exceptions.UserHasNoAccess) e;
                        result.setUserHasNoAccessIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeImagesFromLecture_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.removeImagesFromLecture(args.lectureId, args.images, args.user,resultHandler);
      }
    }

    public static class removeLecture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeLecture_args, Boolean> {
      public removeLecture() {
        super("removeLecture");
      }

      public removeLecture_args getEmptyArgsInstance() {
        return new removeLecture_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removeLecture_result result = new removeLecture_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeLecture_result result = new removeLecture_result();
            if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.UserHasNoAccess) {
                        result.UserHasNoAccess = (org.lecturenotes.exceptions.UserHasNoAccess) e;
                        result.setUserHasNoAccessIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeLecture_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removeLecture(args.lectureId, args.user,resultHandler);
      }
    }

    public static class getLecture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLecture_args, org.lecturenotes.types.Lecture> {
      public getLecture() {
        super("getLecture");
      }

      public getLecture_args getEmptyArgsInstance() {
        return new getLecture_args();
      }

      public AsyncMethodCallback<org.lecturenotes.types.Lecture> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.lecturenotes.types.Lecture>() { 
          public void onComplete(org.lecturenotes.types.Lecture o) {
            getLecture_result result = new getLecture_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLecture_result result = new getLecture_result();
            if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLecture_args args, org.apache.thrift.async.AsyncMethodCallback<org.lecturenotes.types.Lecture> resultHandler) throws TException {
        iface.getLecture(args.lectureId,resultHandler);
      }
    }

  }

  public static class createLecture_args implements org.apache.thrift.TBase<createLecture_args, createLecture_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLecture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLecture_args");

    private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLecture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLecture_argsTupleSchemeFactory());
    }

    public org.lecturenotes.types.Course course; // required
    public org.lecturenotes.types.Credentials user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE((short)1, "course"),
      USER((short)2, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE
            return COURSE;
          case 2: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Course.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLecture_args.class, metaDataMap);
    }

    public createLecture_args() {
    }

    public createLecture_args(
      org.lecturenotes.types.Course course,
      org.lecturenotes.types.Credentials user)
    {
      this();
      this.course = course;
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLecture_args(createLecture_args other) {
      if (other.isSetCourse()) {
        this.course = new org.lecturenotes.types.Course(other.course);
      }
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
    }

    public createLecture_args deepCopy() {
      return new createLecture_args(this);
    }

    @Override
    public void clear() {
      this.course = null;
      this.user = null;
    }

    public org.lecturenotes.types.Course getCourse() {
      return this.course;
    }

    public createLecture_args setCourse(org.lecturenotes.types.Course course) {
      this.course = course;
      return this;
    }

    public void unsetCourse() {
      this.course = null;
    }

    /** Returns true if field course is set (has been assigned a value) and false otherwise */
    public boolean isSetCourse() {
      return this.course != null;
    }

    public void setCourseIsSet(boolean value) {
      if (!value) {
        this.course = null;
      }
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public createLecture_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE:
        if (value == null) {
          unsetCourse();
        } else {
          setCourse((org.lecturenotes.types.Course)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE:
        return getCourse();

      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE:
        return isSetCourse();
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLecture_args)
        return this.equals((createLecture_args)that);
      return false;
    }

    public boolean equals(createLecture_args that) {
      if (that == null)
        return false;

      boolean this_present_course = true && this.isSetCourse();
      boolean that_present_course = true && that.isSetCourse();
      if (this_present_course || that_present_course) {
        if (!(this_present_course && that_present_course))
          return false;
        if (!this.course.equals(that.course))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLecture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourse()).compareTo(other.isSetCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, other.course);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLecture_args(");
      boolean first = true;

      sb.append("course:");
      if (this.course == null) {
        sb.append("null");
      } else {
        sb.append(this.course);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (course != null) {
        course.validate();
      }
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLecture_argsStandardSchemeFactory implements SchemeFactory {
      public createLecture_argsStandardScheme getScheme() {
        return new createLecture_argsStandardScheme();
      }
    }

    private static class createLecture_argsStandardScheme extends StandardScheme<createLecture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLecture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.course = new org.lecturenotes.types.Course();
                struct.course.read(iprot);
                struct.setCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLecture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.course != null) {
          oprot.writeFieldBegin(COURSE_FIELD_DESC);
          struct.course.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLecture_argsTupleSchemeFactory implements SchemeFactory {
      public createLecture_argsTupleScheme getScheme() {
        return new createLecture_argsTupleScheme();
      }
    }

    private static class createLecture_argsTupleScheme extends TupleScheme<createLecture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourse()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCourse()) {
          struct.course.write(oprot);
        }
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.course = new org.lecturenotes.types.Course();
          struct.course.read(iprot);
          struct.setCourseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class createLecture_result implements org.apache.thrift.TBase<createLecture_result, createLecture_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLecture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLecture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXIST_FIELD_DESC = new org.apache.thrift.protocol.TField("exist", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_HAS_NO_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("UserHasNoAccess", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLecture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLecture_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.lecturenotes.exceptions.CourseExist exist; // required
    public org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXIST((short)1, "exist"),
      USER_HAS_NO_ACCESS((short)2, "UserHasNoAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXIST
            return EXIST;
          case 2: // USER_HAS_NO_ACCESS
            return USER_HAS_NO_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXIST, new org.apache.thrift.meta_data.FieldMetaData("exist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_HAS_NO_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("UserHasNoAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLecture_result.class, metaDataMap);
    }

    public createLecture_result() {
    }

    public createLecture_result(
      String success,
      org.lecturenotes.exceptions.CourseExist exist,
      org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess)
    {
      this();
      this.success = success;
      this.exist = exist;
      this.UserHasNoAccess = UserHasNoAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLecture_result(createLecture_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExist()) {
        this.exist = new org.lecturenotes.exceptions.CourseExist(other.exist);
      }
      if (other.isSetUserHasNoAccess()) {
        this.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess(other.UserHasNoAccess);
      }
    }

    public createLecture_result deepCopy() {
      return new createLecture_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exist = null;
      this.UserHasNoAccess = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createLecture_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.lecturenotes.exceptions.CourseExist getExist() {
      return this.exist;
    }

    public createLecture_result setExist(org.lecturenotes.exceptions.CourseExist exist) {
      this.exist = exist;
      return this;
    }

    public void unsetExist() {
      this.exist = null;
    }

    /** Returns true if field exist is set (has been assigned a value) and false otherwise */
    public boolean isSetExist() {
      return this.exist != null;
    }

    public void setExistIsSet(boolean value) {
      if (!value) {
        this.exist = null;
      }
    }

    public org.lecturenotes.exceptions.UserHasNoAccess getUserHasNoAccess() {
      return this.UserHasNoAccess;
    }

    public createLecture_result setUserHasNoAccess(org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
      this.UserHasNoAccess = UserHasNoAccess;
      return this;
    }

    public void unsetUserHasNoAccess() {
      this.UserHasNoAccess = null;
    }

    /** Returns true if field UserHasNoAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetUserHasNoAccess() {
      return this.UserHasNoAccess != null;
    }

    public void setUserHasNoAccessIsSet(boolean value) {
      if (!value) {
        this.UserHasNoAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXIST:
        if (value == null) {
          unsetExist();
        } else {
          setExist((org.lecturenotes.exceptions.CourseExist)value);
        }
        break;

      case USER_HAS_NO_ACCESS:
        if (value == null) {
          unsetUserHasNoAccess();
        } else {
          setUserHasNoAccess((org.lecturenotes.exceptions.UserHasNoAccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXIST:
        return getExist();

      case USER_HAS_NO_ACCESS:
        return getUserHasNoAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXIST:
        return isSetExist();
      case USER_HAS_NO_ACCESS:
        return isSetUserHasNoAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLecture_result)
        return this.equals((createLecture_result)that);
      return false;
    }

    public boolean equals(createLecture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exist = true && this.isSetExist();
      boolean that_present_exist = true && that.isSetExist();
      if (this_present_exist || that_present_exist) {
        if (!(this_present_exist && that_present_exist))
          return false;
        if (!this.exist.equals(that.exist))
          return false;
      }

      boolean this_present_UserHasNoAccess = true && this.isSetUserHasNoAccess();
      boolean that_present_UserHasNoAccess = true && that.isSetUserHasNoAccess();
      if (this_present_UserHasNoAccess || that_present_UserHasNoAccess) {
        if (!(this_present_UserHasNoAccess && that_present_UserHasNoAccess))
          return false;
        if (!this.UserHasNoAccess.equals(that.UserHasNoAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLecture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExist()).compareTo(other.isSetExist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exist, other.exist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserHasNoAccess()).compareTo(other.isSetUserHasNoAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserHasNoAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserHasNoAccess, other.UserHasNoAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLecture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exist:");
      if (this.exist == null) {
        sb.append("null");
      } else {
        sb.append(this.exist);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("UserHasNoAccess:");
      if (this.UserHasNoAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.UserHasNoAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLecture_resultStandardSchemeFactory implements SchemeFactory {
      public createLecture_resultStandardScheme getScheme() {
        return new createLecture_resultStandardScheme();
      }
    }

    private static class createLecture_resultStandardScheme extends StandardScheme<createLecture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLecture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exist = new org.lecturenotes.exceptions.CourseExist();
                struct.exist.read(iprot);
                struct.setExistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_HAS_NO_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
                struct.UserHasNoAccess.read(iprot);
                struct.setUserHasNoAccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLecture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exist != null) {
          oprot.writeFieldBegin(EXIST_FIELD_DESC);
          struct.exist.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.UserHasNoAccess != null) {
          oprot.writeFieldBegin(USER_HAS_NO_ACCESS_FIELD_DESC);
          struct.UserHasNoAccess.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLecture_resultTupleSchemeFactory implements SchemeFactory {
      public createLecture_resultTupleScheme getScheme() {
        return new createLecture_resultTupleScheme();
      }
    }

    private static class createLecture_resultTupleScheme extends TupleScheme<createLecture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExist()) {
          optionals.set(1);
        }
        if (struct.isSetUserHasNoAccess()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExist()) {
          struct.exist.write(oprot);
        }
        if (struct.isSetUserHasNoAccess()) {
          struct.UserHasNoAccess.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exist = new org.lecturenotes.exceptions.CourseExist();
          struct.exist.read(iprot);
          struct.setExistIsSet(true);
        }
        if (incoming.get(2)) {
          struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
          struct.UserHasNoAccess.read(iprot);
          struct.setUserHasNoAccessIsSet(true);
        }
      }
    }

  }

  public static class addImagesToLecture_args implements org.apache.thrift.TBase<addImagesToLecture_args, addImagesToLecture_args._Fields>, java.io.Serializable, Cloneable, Comparable<addImagesToLecture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addImagesToLecture_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addImagesToLecture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addImagesToLecture_argsTupleSchemeFactory());
    }

    public String lectureId; // required
    public List<String> images; // required
    public org.lecturenotes.types.Credentials user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      IMAGES((short)2, "images"),
      USER((short)3, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // IMAGES
            return IMAGES;
          case 3: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "Images")));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addImagesToLecture_args.class, metaDataMap);
    }

    public addImagesToLecture_args() {
    }

    public addImagesToLecture_args(
      String lectureId,
      List<String> images,
      org.lecturenotes.types.Credentials user)
    {
      this();
      this.lectureId = lectureId;
      this.images = images;
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addImagesToLecture_args(addImagesToLecture_args other) {
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
      if (other.isSetImages()) {
        this.images = other.images;
      }
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
    }

    public addImagesToLecture_args deepCopy() {
      return new addImagesToLecture_args(this);
    }

    @Override
    public void clear() {
      this.lectureId = null;
      this.images = null;
      this.user = null;
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public addImagesToLecture_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public int getImagesSize() {
      return (this.images == null) ? 0 : this.images.size();
    }

    public java.util.Iterator<String> getImagesIterator() {
      return (this.images == null) ? null : this.images.iterator();
    }

    public void addToImages(String elem) {
      if (this.images == null) {
        this.images = new ArrayList<String>();
      }
      this.images.add(elem);
    }

    public List<String> getImages() {
      return this.images;
    }

    public addImagesToLecture_args setImages(List<String> images) {
      this.images = images;
      return this;
    }

    public void unsetImages() {
      this.images = null;
    }

    /** Returns true if field images is set (has been assigned a value) and false otherwise */
    public boolean isSetImages() {
      return this.images != null;
    }

    public void setImagesIsSet(boolean value) {
      if (!value) {
        this.images = null;
      }
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public addImagesToLecture_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      case IMAGES:
        if (value == null) {
          unsetImages();
        } else {
          setImages((List<String>)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return getLectureId();

      case IMAGES:
        return getImages();

      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case IMAGES:
        return isSetImages();
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addImagesToLecture_args)
        return this.equals((addImagesToLecture_args)that);
      return false;
    }

    public boolean equals(addImagesToLecture_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      boolean this_present_images = true && this.isSetImages();
      boolean that_present_images = true && that.isSetImages();
      if (this_present_images || that_present_images) {
        if (!(this_present_images && that_present_images))
          return false;
        if (!this.images.equals(that.images))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addImagesToLecture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addImagesToLecture_args(");
      boolean first = true;

      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addImagesToLecture_argsStandardSchemeFactory implements SchemeFactory {
      public addImagesToLecture_argsStandardScheme getScheme() {
        return new addImagesToLecture_argsStandardScheme();
      }
    }

    private static class addImagesToLecture_argsStandardScheme extends StandardScheme<addImagesToLecture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addImagesToLecture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IMAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.images = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10;
                    _elem10 = iprot.readString();
                    struct.images.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setImagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addImagesToLecture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        if (struct.images != null) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (String _iter11 : struct.images)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addImagesToLecture_argsTupleSchemeFactory implements SchemeFactory {
      public addImagesToLecture_argsTupleScheme getScheme() {
        return new addImagesToLecture_argsTupleScheme();
      }
    }

    private static class addImagesToLecture_argsTupleScheme extends TupleScheme<addImagesToLecture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addImagesToLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetImages()) {
          optionals.set(1);
        }
        if (struct.isSetUser()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
        if (struct.isSetImages()) {
          {
            oprot.writeI32(struct.images.size());
            for (String _iter12 : struct.images)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addImagesToLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.images = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15;
              _elem15 = iprot.readString();
              struct.images.add(_elem15);
            }
          }
          struct.setImagesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class addImagesToLecture_result implements org.apache.thrift.TBase<addImagesToLecture_result, addImagesToLecture_result._Fields>, java.io.Serializable, Cloneable, Comparable<addImagesToLecture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addImagesToLecture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_HAS_NO_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("UserHasNoAccess", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addImagesToLecture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addImagesToLecture_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required
    public org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LECTURE_NOT_FOUND((short)1, "lectureNotFound"),
      USER_HAS_NO_ACCESS((short)2, "UserHasNoAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          case 2: // USER_HAS_NO_ACCESS
            return USER_HAS_NO_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_HAS_NO_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("UserHasNoAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addImagesToLecture_result.class, metaDataMap);
    }

    public addImagesToLecture_result() {
    }

    public addImagesToLecture_result(
      String success,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound,
      org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess)
    {
      this();
      this.success = success;
      this.lectureNotFound = lectureNotFound;
      this.UserHasNoAccess = UserHasNoAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addImagesToLecture_result(addImagesToLecture_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
      if (other.isSetUserHasNoAccess()) {
        this.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess(other.UserHasNoAccess);
      }
    }

    public addImagesToLecture_result deepCopy() {
      return new addImagesToLecture_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.lectureNotFound = null;
      this.UserHasNoAccess = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addImagesToLecture_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public addImagesToLecture_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.UserHasNoAccess getUserHasNoAccess() {
      return this.UserHasNoAccess;
    }

    public addImagesToLecture_result setUserHasNoAccess(org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
      this.UserHasNoAccess = UserHasNoAccess;
      return this;
    }

    public void unsetUserHasNoAccess() {
      this.UserHasNoAccess = null;
    }

    /** Returns true if field UserHasNoAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetUserHasNoAccess() {
      return this.UserHasNoAccess != null;
    }

    public void setUserHasNoAccessIsSet(boolean value) {
      if (!value) {
        this.UserHasNoAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      case USER_HAS_NO_ACCESS:
        if (value == null) {
          unsetUserHasNoAccess();
        } else {
          setUserHasNoAccess((org.lecturenotes.exceptions.UserHasNoAccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      case USER_HAS_NO_ACCESS:
        return getUserHasNoAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      case USER_HAS_NO_ACCESS:
        return isSetUserHasNoAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addImagesToLecture_result)
        return this.equals((addImagesToLecture_result)that);
      return false;
    }

    public boolean equals(addImagesToLecture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      boolean this_present_UserHasNoAccess = true && this.isSetUserHasNoAccess();
      boolean that_present_UserHasNoAccess = true && that.isSetUserHasNoAccess();
      if (this_present_UserHasNoAccess || that_present_UserHasNoAccess) {
        if (!(this_present_UserHasNoAccess && that_present_UserHasNoAccess))
          return false;
        if (!this.UserHasNoAccess.equals(that.UserHasNoAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addImagesToLecture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserHasNoAccess()).compareTo(other.isSetUserHasNoAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserHasNoAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserHasNoAccess, other.UserHasNoAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addImagesToLecture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("UserHasNoAccess:");
      if (this.UserHasNoAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.UserHasNoAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addImagesToLecture_resultStandardSchemeFactory implements SchemeFactory {
      public addImagesToLecture_resultStandardScheme getScheme() {
        return new addImagesToLecture_resultStandardScheme();
      }
    }

    private static class addImagesToLecture_resultStandardScheme extends StandardScheme<addImagesToLecture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addImagesToLecture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_HAS_NO_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
                struct.UserHasNoAccess.read(iprot);
                struct.setUserHasNoAccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addImagesToLecture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.UserHasNoAccess != null) {
          oprot.writeFieldBegin(USER_HAS_NO_ACCESS_FIELD_DESC);
          struct.UserHasNoAccess.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addImagesToLecture_resultTupleSchemeFactory implements SchemeFactory {
      public addImagesToLecture_resultTupleScheme getScheme() {
        return new addImagesToLecture_resultTupleScheme();
      }
    }

    private static class addImagesToLecture_resultTupleScheme extends TupleScheme<addImagesToLecture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addImagesToLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetUserHasNoAccess()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
        if (struct.isSetUserHasNoAccess()) {
          struct.UserHasNoAccess.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addImagesToLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
          struct.UserHasNoAccess.read(iprot);
          struct.setUserHasNoAccessIsSet(true);
        }
      }
    }

  }

  public static class removeImagesFromLecture_args implements org.apache.thrift.TBase<removeImagesFromLecture_args, removeImagesFromLecture_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeImagesFromLecture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeImagesFromLecture_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeImagesFromLecture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeImagesFromLecture_argsTupleSchemeFactory());
    }

    public String lectureId; // required
    public List<String> images; // required
    public org.lecturenotes.types.Credentials user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      IMAGES((short)2, "images"),
      USER((short)3, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // IMAGES
            return IMAGES;
          case 3: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "Images")));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeImagesFromLecture_args.class, metaDataMap);
    }

    public removeImagesFromLecture_args() {
    }

    public removeImagesFromLecture_args(
      String lectureId,
      List<String> images,
      org.lecturenotes.types.Credentials user)
    {
      this();
      this.lectureId = lectureId;
      this.images = images;
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeImagesFromLecture_args(removeImagesFromLecture_args other) {
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
      if (other.isSetImages()) {
        this.images = other.images;
      }
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
    }

    public removeImagesFromLecture_args deepCopy() {
      return new removeImagesFromLecture_args(this);
    }

    @Override
    public void clear() {
      this.lectureId = null;
      this.images = null;
      this.user = null;
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public removeImagesFromLecture_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public int getImagesSize() {
      return (this.images == null) ? 0 : this.images.size();
    }

    public java.util.Iterator<String> getImagesIterator() {
      return (this.images == null) ? null : this.images.iterator();
    }

    public void addToImages(String elem) {
      if (this.images == null) {
        this.images = new ArrayList<String>();
      }
      this.images.add(elem);
    }

    public List<String> getImages() {
      return this.images;
    }

    public removeImagesFromLecture_args setImages(List<String> images) {
      this.images = images;
      return this;
    }

    public void unsetImages() {
      this.images = null;
    }

    /** Returns true if field images is set (has been assigned a value) and false otherwise */
    public boolean isSetImages() {
      return this.images != null;
    }

    public void setImagesIsSet(boolean value) {
      if (!value) {
        this.images = null;
      }
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public removeImagesFromLecture_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      case IMAGES:
        if (value == null) {
          unsetImages();
        } else {
          setImages((List<String>)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return getLectureId();

      case IMAGES:
        return getImages();

      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case IMAGES:
        return isSetImages();
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeImagesFromLecture_args)
        return this.equals((removeImagesFromLecture_args)that);
      return false;
    }

    public boolean equals(removeImagesFromLecture_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      boolean this_present_images = true && this.isSetImages();
      boolean that_present_images = true && that.isSetImages();
      if (this_present_images || that_present_images) {
        if (!(this_present_images && that_present_images))
          return false;
        if (!this.images.equals(that.images))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeImagesFromLecture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeImagesFromLecture_args(");
      boolean first = true;

      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeImagesFromLecture_argsStandardSchemeFactory implements SchemeFactory {
      public removeImagesFromLecture_argsStandardScheme getScheme() {
        return new removeImagesFromLecture_argsStandardScheme();
      }
    }

    private static class removeImagesFromLecture_argsStandardScheme extends StandardScheme<removeImagesFromLecture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeImagesFromLecture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IMAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.images = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18;
                    _elem18 = iprot.readString();
                    struct.images.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setImagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeImagesFromLecture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        if (struct.images != null) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (String _iter19 : struct.images)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeImagesFromLecture_argsTupleSchemeFactory implements SchemeFactory {
      public removeImagesFromLecture_argsTupleScheme getScheme() {
        return new removeImagesFromLecture_argsTupleScheme();
      }
    }

    private static class removeImagesFromLecture_argsTupleScheme extends TupleScheme<removeImagesFromLecture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeImagesFromLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetImages()) {
          optionals.set(1);
        }
        if (struct.isSetUser()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
        if (struct.isSetImages()) {
          {
            oprot.writeI32(struct.images.size());
            for (String _iter20 : struct.images)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeImagesFromLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.images = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23;
              _elem23 = iprot.readString();
              struct.images.add(_elem23);
            }
          }
          struct.setImagesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class removeImagesFromLecture_result implements org.apache.thrift.TBase<removeImagesFromLecture_result, removeImagesFromLecture_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeImagesFromLecture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeImagesFromLecture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_HAS_NO_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("UserHasNoAccess", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeImagesFromLecture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeImagesFromLecture_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required
    public org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LECTURE_NOT_FOUND((short)1, "lectureNotFound"),
      USER_HAS_NO_ACCESS((short)2, "UserHasNoAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          case 2: // USER_HAS_NO_ACCESS
            return USER_HAS_NO_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_HAS_NO_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("UserHasNoAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeImagesFromLecture_result.class, metaDataMap);
    }

    public removeImagesFromLecture_result() {
    }

    public removeImagesFromLecture_result(
      String success,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound,
      org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess)
    {
      this();
      this.success = success;
      this.lectureNotFound = lectureNotFound;
      this.UserHasNoAccess = UserHasNoAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeImagesFromLecture_result(removeImagesFromLecture_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
      if (other.isSetUserHasNoAccess()) {
        this.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess(other.UserHasNoAccess);
      }
    }

    public removeImagesFromLecture_result deepCopy() {
      return new removeImagesFromLecture_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.lectureNotFound = null;
      this.UserHasNoAccess = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public removeImagesFromLecture_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public removeImagesFromLecture_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.UserHasNoAccess getUserHasNoAccess() {
      return this.UserHasNoAccess;
    }

    public removeImagesFromLecture_result setUserHasNoAccess(org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
      this.UserHasNoAccess = UserHasNoAccess;
      return this;
    }

    public void unsetUserHasNoAccess() {
      this.UserHasNoAccess = null;
    }

    /** Returns true if field UserHasNoAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetUserHasNoAccess() {
      return this.UserHasNoAccess != null;
    }

    public void setUserHasNoAccessIsSet(boolean value) {
      if (!value) {
        this.UserHasNoAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      case USER_HAS_NO_ACCESS:
        if (value == null) {
          unsetUserHasNoAccess();
        } else {
          setUserHasNoAccess((org.lecturenotes.exceptions.UserHasNoAccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      case USER_HAS_NO_ACCESS:
        return getUserHasNoAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      case USER_HAS_NO_ACCESS:
        return isSetUserHasNoAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeImagesFromLecture_result)
        return this.equals((removeImagesFromLecture_result)that);
      return false;
    }

    public boolean equals(removeImagesFromLecture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      boolean this_present_UserHasNoAccess = true && this.isSetUserHasNoAccess();
      boolean that_present_UserHasNoAccess = true && that.isSetUserHasNoAccess();
      if (this_present_UserHasNoAccess || that_present_UserHasNoAccess) {
        if (!(this_present_UserHasNoAccess && that_present_UserHasNoAccess))
          return false;
        if (!this.UserHasNoAccess.equals(that.UserHasNoAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeImagesFromLecture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserHasNoAccess()).compareTo(other.isSetUserHasNoAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserHasNoAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserHasNoAccess, other.UserHasNoAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeImagesFromLecture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("UserHasNoAccess:");
      if (this.UserHasNoAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.UserHasNoAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeImagesFromLecture_resultStandardSchemeFactory implements SchemeFactory {
      public removeImagesFromLecture_resultStandardScheme getScheme() {
        return new removeImagesFromLecture_resultStandardScheme();
      }
    }

    private static class removeImagesFromLecture_resultStandardScheme extends StandardScheme<removeImagesFromLecture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeImagesFromLecture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_HAS_NO_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
                struct.UserHasNoAccess.read(iprot);
                struct.setUserHasNoAccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeImagesFromLecture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.UserHasNoAccess != null) {
          oprot.writeFieldBegin(USER_HAS_NO_ACCESS_FIELD_DESC);
          struct.UserHasNoAccess.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeImagesFromLecture_resultTupleSchemeFactory implements SchemeFactory {
      public removeImagesFromLecture_resultTupleScheme getScheme() {
        return new removeImagesFromLecture_resultTupleScheme();
      }
    }

    private static class removeImagesFromLecture_resultTupleScheme extends TupleScheme<removeImagesFromLecture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeImagesFromLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetUserHasNoAccess()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
        if (struct.isSetUserHasNoAccess()) {
          struct.UserHasNoAccess.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeImagesFromLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
          struct.UserHasNoAccess.read(iprot);
          struct.setUserHasNoAccessIsSet(true);
        }
      }
    }

  }

  public static class removeLecture_args implements org.apache.thrift.TBase<removeLecture_args, removeLecture_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeLecture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeLecture_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeLecture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeLecture_argsTupleSchemeFactory());
    }

    public String lectureId; // required
    public org.lecturenotes.types.Credentials user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId"),
      USER((short)2, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          case 2: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeLecture_args.class, metaDataMap);
    }

    public removeLecture_args() {
    }

    public removeLecture_args(
      String lectureId,
      org.lecturenotes.types.Credentials user)
    {
      this();
      this.lectureId = lectureId;
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeLecture_args(removeLecture_args other) {
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
    }

    public removeLecture_args deepCopy() {
      return new removeLecture_args(this);
    }

    @Override
    public void clear() {
      this.lectureId = null;
      this.user = null;
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public removeLecture_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public removeLecture_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return getLectureId();

      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeLecture_args)
        return this.equals((removeLecture_args)that);
      return false;
    }

    public boolean equals(removeLecture_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeLecture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeLecture_args(");
      boolean first = true;

      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeLecture_argsStandardSchemeFactory implements SchemeFactory {
      public removeLecture_argsStandardScheme getScheme() {
        return new removeLecture_argsStandardScheme();
      }
    }

    private static class removeLecture_argsStandardScheme extends StandardScheme<removeLecture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeLecture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeLecture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeLecture_argsTupleSchemeFactory implements SchemeFactory {
      public removeLecture_argsTupleScheme getScheme() {
        return new removeLecture_argsTupleScheme();
      }
    }

    private static class removeLecture_argsTupleScheme extends TupleScheme<removeLecture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class removeLecture_result implements org.apache.thrift.TBase<removeLecture_result, removeLecture_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeLecture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeLecture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_HAS_NO_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("UserHasNoAccess", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeLecture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeLecture_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required
    public org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LECTURE_NOT_FOUND((short)1, "lectureNotFound"),
      USER_HAS_NO_ACCESS((short)2, "UserHasNoAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          case 2: // USER_HAS_NO_ACCESS
            return USER_HAS_NO_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_HAS_NO_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("UserHasNoAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeLecture_result.class, metaDataMap);
    }

    public removeLecture_result() {
    }

    public removeLecture_result(
      boolean success,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound,
      org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.lectureNotFound = lectureNotFound;
      this.UserHasNoAccess = UserHasNoAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeLecture_result(removeLecture_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
      if (other.isSetUserHasNoAccess()) {
        this.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess(other.UserHasNoAccess);
      }
    }

    public removeLecture_result deepCopy() {
      return new removeLecture_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.lectureNotFound = null;
      this.UserHasNoAccess = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeLecture_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public removeLecture_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.UserHasNoAccess getUserHasNoAccess() {
      return this.UserHasNoAccess;
    }

    public removeLecture_result setUserHasNoAccess(org.lecturenotes.exceptions.UserHasNoAccess UserHasNoAccess) {
      this.UserHasNoAccess = UserHasNoAccess;
      return this;
    }

    public void unsetUserHasNoAccess() {
      this.UserHasNoAccess = null;
    }

    /** Returns true if field UserHasNoAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetUserHasNoAccess() {
      return this.UserHasNoAccess != null;
    }

    public void setUserHasNoAccessIsSet(boolean value) {
      if (!value) {
        this.UserHasNoAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      case USER_HAS_NO_ACCESS:
        if (value == null) {
          unsetUserHasNoAccess();
        } else {
          setUserHasNoAccess((org.lecturenotes.exceptions.UserHasNoAccess)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      case USER_HAS_NO_ACCESS:
        return getUserHasNoAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      case USER_HAS_NO_ACCESS:
        return isSetUserHasNoAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeLecture_result)
        return this.equals((removeLecture_result)that);
      return false;
    }

    public boolean equals(removeLecture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      boolean this_present_UserHasNoAccess = true && this.isSetUserHasNoAccess();
      boolean that_present_UserHasNoAccess = true && that.isSetUserHasNoAccess();
      if (this_present_UserHasNoAccess || that_present_UserHasNoAccess) {
        if (!(this_present_UserHasNoAccess && that_present_UserHasNoAccess))
          return false;
        if (!this.UserHasNoAccess.equals(that.UserHasNoAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeLecture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserHasNoAccess()).compareTo(other.isSetUserHasNoAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserHasNoAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserHasNoAccess, other.UserHasNoAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeLecture_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("UserHasNoAccess:");
      if (this.UserHasNoAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.UserHasNoAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeLecture_resultStandardSchemeFactory implements SchemeFactory {
      public removeLecture_resultStandardScheme getScheme() {
        return new removeLecture_resultStandardScheme();
      }
    }

    private static class removeLecture_resultStandardScheme extends StandardScheme<removeLecture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeLecture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_HAS_NO_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
                struct.UserHasNoAccess.read(iprot);
                struct.setUserHasNoAccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeLecture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.UserHasNoAccess != null) {
          oprot.writeFieldBegin(USER_HAS_NO_ACCESS_FIELD_DESC);
          struct.UserHasNoAccess.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeLecture_resultTupleSchemeFactory implements SchemeFactory {
      public removeLecture_resultTupleScheme getScheme() {
        return new removeLecture_resultTupleScheme();
      }
    }

    private static class removeLecture_resultTupleScheme extends TupleScheme<removeLecture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetUserHasNoAccess()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
        if (struct.isSetUserHasNoAccess()) {
          struct.UserHasNoAccess.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.UserHasNoAccess = new org.lecturenotes.exceptions.UserHasNoAccess();
          struct.UserHasNoAccess.read(iprot);
          struct.setUserHasNoAccessIsSet(true);
        }
      }
    }

  }

  public static class getLecture_args implements org.apache.thrift.TBase<getLecture_args, getLecture_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLecture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLecture_args");

    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLecture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLecture_argsTupleSchemeFactory());
    }

    public String lectureId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LECTURE_ID((short)1, "lectureId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LECTURE_ID
            return LECTURE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLecture_args.class, metaDataMap);
    }

    public getLecture_args() {
    }

    public getLecture_args(
      String lectureId)
    {
      this();
      this.lectureId = lectureId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLecture_args(getLecture_args other) {
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
    }

    public getLecture_args deepCopy() {
      return new getLecture_args(this);
    }

    @Override
    public void clear() {
      this.lectureId = null;
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public getLecture_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LECTURE_ID:
        return getLectureId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LECTURE_ID:
        return isSetLectureId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLecture_args)
        return this.equals((getLecture_args)that);
      return false;
    }

    public boolean equals(getLecture_args that) {
      if (that == null)
        return false;

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLecture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLecture_args(");
      boolean first = true;

      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLecture_argsStandardSchemeFactory implements SchemeFactory {
      public getLecture_argsStandardScheme getScheme() {
        return new getLecture_argsStandardScheme();
      }
    }

    private static class getLecture_argsStandardScheme extends StandardScheme<getLecture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLecture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLecture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLecture_argsTupleSchemeFactory implements SchemeFactory {
      public getLecture_argsTupleScheme getScheme() {
        return new getLecture_argsTupleScheme();
      }
    }

    private static class getLecture_argsTupleScheme extends TupleScheme<getLecture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLectureId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLecture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
      }
    }

  }

  public static class getLecture_result implements org.apache.thrift.TBase<getLecture_result, getLecture_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLecture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLecture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLecture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLecture_resultTupleSchemeFactory());
    }

    public org.lecturenotes.types.Lecture success; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LECTURE_NOT_FOUND((short)1, "lectureNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Lecture.class)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLecture_result.class, metaDataMap);
    }

    public getLecture_result() {
    }

    public getLecture_result(
      org.lecturenotes.types.Lecture success,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound)
    {
      this();
      this.success = success;
      this.lectureNotFound = lectureNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLecture_result(getLecture_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.lecturenotes.types.Lecture(other.success);
      }
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
    }

    public getLecture_result deepCopy() {
      return new getLecture_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.lectureNotFound = null;
    }

    public org.lecturenotes.types.Lecture getSuccess() {
      return this.success;
    }

    public getLecture_result setSuccess(org.lecturenotes.types.Lecture success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public getLecture_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.lecturenotes.types.Lecture)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLecture_result)
        return this.equals((getLecture_result)that);
      return false;
    }

    public boolean equals(getLecture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLecture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLecture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLecture_resultStandardSchemeFactory implements SchemeFactory {
      public getLecture_resultStandardScheme getScheme() {
        return new getLecture_resultStandardScheme();
      }
    }

    private static class getLecture_resultStandardScheme extends StandardScheme<getLecture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLecture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.lecturenotes.types.Lecture();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLecture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLecture_resultTupleSchemeFactory implements SchemeFactory {
      public getLecture_resultTupleScheme getScheme() {
        return new getLecture_resultTupleScheme();
      }
    }

    private static class getLecture_resultTupleScheme extends TupleScheme<getLecture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLecture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.lecturenotes.types.Lecture();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
      }
    }

  }

}
