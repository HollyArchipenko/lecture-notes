/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.lecturenotes.types;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Lecture implements org.apache.thrift.TBase<Lecture, Lecture._Fields>, java.io.Serializable, Cloneable, Comparable<Lecture> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Lecture");

  private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LectureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LectureTupleSchemeFactory());
  }

  public String lectureId; // required
  public Course course; // required
  public List<String> catalog; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LECTURE_ID((short)1, "lectureId"),
    COURSE((short)2, "course"),
    CATALOG((short)3, "catalog");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LECTURE_ID
          return LECTURE_ID;
        case 2: // COURSE
          return COURSE;
        case 3: // CATALOG
          return CATALOG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Course.class)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "Images")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Lecture.class, metaDataMap);
  }

  public Lecture() {
  }

  public Lecture(
    String lectureId,
    Course course,
    List<String> catalog)
  {
    this();
    this.lectureId = lectureId;
    this.course = course;
    this.catalog = catalog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Lecture(Lecture other) {
    if (other.isSetLectureId()) {
      this.lectureId = other.lectureId;
    }
    if (other.isSetCourse()) {
      this.course = new Course(other.course);
    }
    if (other.isSetCatalog()) {
      this.catalog = other.catalog;
    }
  }

  public Lecture deepCopy() {
    return new Lecture(this);
  }

  @Override
  public void clear() {
    this.lectureId = null;
    this.course = null;
    this.catalog = null;
  }

  public String getLectureId() {
    return this.lectureId;
  }

  public Lecture setLectureId(String lectureId) {
    this.lectureId = lectureId;
    return this;
  }

  public void unsetLectureId() {
    this.lectureId = null;
  }

  /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
  public boolean isSetLectureId() {
    return this.lectureId != null;
  }

  public void setLectureIdIsSet(boolean value) {
    if (!value) {
      this.lectureId = null;
    }
  }

  public Course getCourse() {
    return this.course;
  }

  public Lecture setCourse(Course course) {
    this.course = course;
    return this;
  }

  public void unsetCourse() {
    this.course = null;
  }

  /** Returns true if field course is set (has been assigned a value) and false otherwise */
  public boolean isSetCourse() {
    return this.course != null;
  }

  public void setCourseIsSet(boolean value) {
    if (!value) {
      this.course = null;
    }
  }

  public int getCatalogSize() {
    return (this.catalog == null) ? 0 : this.catalog.size();
  }

  public java.util.Iterator<String> getCatalogIterator() {
    return (this.catalog == null) ? null : this.catalog.iterator();
  }

  public void addToCatalog(String elem) {
    if (this.catalog == null) {
      this.catalog = new ArrayList<String>();
    }
    this.catalog.add(elem);
  }

  public List<String> getCatalog() {
    return this.catalog;
  }

  public Lecture setCatalog(List<String> catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LECTURE_ID:
      if (value == null) {
        unsetLectureId();
      } else {
        setLectureId((String)value);
      }
      break;

    case COURSE:
      if (value == null) {
        unsetCourse();
      } else {
        setCourse((Course)value);
      }
      break;

    case CATALOG:
      if (value == null) {
        unsetCatalog();
      } else {
        setCatalog((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LECTURE_ID:
      return getLectureId();

    case COURSE:
      return getCourse();

    case CATALOG:
      return getCatalog();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LECTURE_ID:
      return isSetLectureId();
    case COURSE:
      return isSetCourse();
    case CATALOG:
      return isSetCatalog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Lecture)
      return this.equals((Lecture)that);
    return false;
  }

  public boolean equals(Lecture that) {
    if (that == null)
      return false;

    boolean this_present_lectureId = true && this.isSetLectureId();
    boolean that_present_lectureId = true && that.isSetLectureId();
    if (this_present_lectureId || that_present_lectureId) {
      if (!(this_present_lectureId && that_present_lectureId))
        return false;
      if (!this.lectureId.equals(that.lectureId))
        return false;
    }

    boolean this_present_course = true && this.isSetCourse();
    boolean that_present_course = true && that.isSetCourse();
    if (this_present_course || that_present_course) {
      if (!(this_present_course && that_present_course))
        return false;
      if (!this.course.equals(that.course))
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Lecture other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLectureId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourse()).compareTo(other.isSetCourse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, other.course);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(other.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Lecture(");
    boolean first = true;

    sb.append("lectureId:");
    if (this.lectureId == null) {
      sb.append("null");
    } else {
      sb.append(this.lectureId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("course:");
    if (this.course == null) {
      sb.append("null");
    } else {
      sb.append(this.course);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalog:");
    if (this.catalog == null) {
      sb.append("null");
    } else {
      sb.append(this.catalog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (course != null) {
      course.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LectureStandardSchemeFactory implements SchemeFactory {
    public LectureStandardScheme getScheme() {
      return new LectureStandardScheme();
    }
  }

  private static class LectureStandardScheme extends StandardScheme<Lecture> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Lecture struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LECTURE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lectureId = iprot.readString();
              struct.setLectureIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COURSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.course = new Course();
              struct.course.read(iprot);
              struct.setCourseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.catalog = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.catalog.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Lecture struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lectureId != null) {
        oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
        oprot.writeString(struct.lectureId);
        oprot.writeFieldEnd();
      }
      if (struct.course != null) {
        oprot.writeFieldBegin(COURSE_FIELD_DESC);
        struct.course.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.catalog != null) {
        oprot.writeFieldBegin(CATALOG_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.catalog.size()));
          for (String _iter3 : struct.catalog)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LectureTupleSchemeFactory implements SchemeFactory {
    public LectureTupleScheme getScheme() {
      return new LectureTupleScheme();
    }
  }

  private static class LectureTupleScheme extends TupleScheme<Lecture> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Lecture struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLectureId()) {
        optionals.set(0);
      }
      if (struct.isSetCourse()) {
        optionals.set(1);
      }
      if (struct.isSetCatalog()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLectureId()) {
        oprot.writeString(struct.lectureId);
      }
      if (struct.isSetCourse()) {
        struct.course.write(oprot);
      }
      if (struct.isSetCatalog()) {
        {
          oprot.writeI32(struct.catalog.size());
          for (String _iter4 : struct.catalog)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Lecture struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.lectureId = iprot.readString();
        struct.setLectureIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.course = new Course();
        struct.course.read(iprot);
        struct.setCourseIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.catalog = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.catalog.add(_elem7);
          }
        }
        struct.setCatalogIsSet(true);
      }
    }
  }

}

