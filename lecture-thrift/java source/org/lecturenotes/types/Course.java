/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.lecturenotes.types;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Course implements org.apache.thrift.TBase<Course, Course._Fields>, java.io.Serializable, Cloneable, Comparable<Course> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Course");

  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField HOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("holder", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField IS_AUTUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutumn", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField COURSE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("courseNumber", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField UNIVERSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("university", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CourseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CourseTupleSchemeFactory());
  }

  public String subject; // required
  public long year; // required
  public Holder holder; // required
  public boolean isAutumn; // required
  public byte courseNumber; // required
  public String university; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBJECT((short)1, "subject"),
    YEAR((short)2, "year"),
    HOLDER((short)3, "holder"),
    IS_AUTUMN((short)4, "isAutumn"),
    COURSE_NUMBER((short)5, "courseNumber"),
    UNIVERSITY((short)6, "university");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBJECT
          return SUBJECT;
        case 2: // YEAR
          return YEAR;
        case 3: // HOLDER
          return HOLDER;
        case 4: // IS_AUTUMN
          return IS_AUTUMN;
        case 5: // COURSE_NUMBER
          return COURSE_NUMBER;
        case 6: // UNIVERSITY
          return UNIVERSITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YEAR_ISSET_ID = 0;
  private static final int __ISAUTUMN_ISSET_ID = 1;
  private static final int __COURSENUMBER_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOLDER, new org.apache.thrift.meta_data.FieldMetaData("holder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Holder.class)));
    tmpMap.put(_Fields.IS_AUTUMN, new org.apache.thrift.meta_data.FieldMetaData("isAutumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COURSE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("courseNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.UNIVERSITY, new org.apache.thrift.meta_data.FieldMetaData("university", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Course.class, metaDataMap);
  }

  public Course() {
  }

  public Course(
    String subject,
    long year,
    Holder holder,
    boolean isAutumn,
    byte courseNumber,
    String university)
  {
    this();
    this.subject = subject;
    this.year = year;
    setYearIsSet(true);
    this.holder = holder;
    this.isAutumn = isAutumn;
    setIsAutumnIsSet(true);
    this.courseNumber = courseNumber;
    setCourseNumberIsSet(true);
    this.university = university;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Course(Course other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    this.year = other.year;
    if (other.isSetHolder()) {
      this.holder = new Holder(other.holder);
    }
    this.isAutumn = other.isAutumn;
    this.courseNumber = other.courseNumber;
    if (other.isSetUniversity()) {
      this.university = other.university;
    }
  }

  public Course deepCopy() {
    return new Course(this);
  }

  @Override
  public void clear() {
    this.subject = null;
    setYearIsSet(false);
    this.year = 0;
    this.holder = null;
    setIsAutumnIsSet(false);
    this.isAutumn = false;
    setCourseNumberIsSet(false);
    this.courseNumber = 0;
    this.university = null;
  }

  public String getSubject() {
    return this.subject;
  }

  public Course setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public long getYear() {
    return this.year;
  }

  public Course setYear(long year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public Holder getHolder() {
    return this.holder;
  }

  public Course setHolder(Holder holder) {
    this.holder = holder;
    return this;
  }

  public void unsetHolder() {
    this.holder = null;
  }

  /** Returns true if field holder is set (has been assigned a value) and false otherwise */
  public boolean isSetHolder() {
    return this.holder != null;
  }

  public void setHolderIsSet(boolean value) {
    if (!value) {
      this.holder = null;
    }
  }

  public boolean isIsAutumn() {
    return this.isAutumn;
  }

  public Course setIsAutumn(boolean isAutumn) {
    this.isAutumn = isAutumn;
    setIsAutumnIsSet(true);
    return this;
  }

  public void unsetIsAutumn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTUMN_ISSET_ID);
  }

  /** Returns true if field isAutumn is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAutumn() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAUTUMN_ISSET_ID);
  }

  public void setIsAutumnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTUMN_ISSET_ID, value);
  }

  public byte getCourseNumber() {
    return this.courseNumber;
  }

  public Course setCourseNumber(byte courseNumber) {
    this.courseNumber = courseNumber;
    setCourseNumberIsSet(true);
    return this;
  }

  public void unsetCourseNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSENUMBER_ISSET_ID);
  }

  /** Returns true if field courseNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __COURSENUMBER_ISSET_ID);
  }

  public void setCourseNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSENUMBER_ISSET_ID, value);
  }

  public String getUniversity() {
    return this.university;
  }

  public Course setUniversity(String university) {
    this.university = university;
    return this;
  }

  public void unsetUniversity() {
    this.university = null;
  }

  /** Returns true if field university is set (has been assigned a value) and false otherwise */
  public boolean isSetUniversity() {
    return this.university != null;
  }

  public void setUniversityIsSet(boolean value) {
    if (!value) {
      this.university = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Long)value);
      }
      break;

    case HOLDER:
      if (value == null) {
        unsetHolder();
      } else {
        setHolder((Holder)value);
      }
      break;

    case IS_AUTUMN:
      if (value == null) {
        unsetIsAutumn();
      } else {
        setIsAutumn((Boolean)value);
      }
      break;

    case COURSE_NUMBER:
      if (value == null) {
        unsetCourseNumber();
      } else {
        setCourseNumber((Byte)value);
      }
      break;

    case UNIVERSITY:
      if (value == null) {
        unsetUniversity();
      } else {
        setUniversity((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBJECT:
      return getSubject();

    case YEAR:
      return Long.valueOf(getYear());

    case HOLDER:
      return getHolder();

    case IS_AUTUMN:
      return Boolean.valueOf(isIsAutumn());

    case COURSE_NUMBER:
      return Byte.valueOf(getCourseNumber());

    case UNIVERSITY:
      return getUniversity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBJECT:
      return isSetSubject();
    case YEAR:
      return isSetYear();
    case HOLDER:
      return isSetHolder();
    case IS_AUTUMN:
      return isSetIsAutumn();
    case COURSE_NUMBER:
      return isSetCourseNumber();
    case UNIVERSITY:
      return isSetUniversity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Course)
      return this.equals((Course)that);
    return false;
  }

  public boolean equals(Course that) {
    if (that == null)
      return false;

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_holder = true && this.isSetHolder();
    boolean that_present_holder = true && that.isSetHolder();
    if (this_present_holder || that_present_holder) {
      if (!(this_present_holder && that_present_holder))
        return false;
      if (!this.holder.equals(that.holder))
        return false;
    }

    boolean this_present_isAutumn = true;
    boolean that_present_isAutumn = true;
    if (this_present_isAutumn || that_present_isAutumn) {
      if (!(this_present_isAutumn && that_present_isAutumn))
        return false;
      if (this.isAutumn != that.isAutumn)
        return false;
    }

    boolean this_present_courseNumber = true;
    boolean that_present_courseNumber = true;
    if (this_present_courseNumber || that_present_courseNumber) {
      if (!(this_present_courseNumber && that_present_courseNumber))
        return false;
      if (this.courseNumber != that.courseNumber)
        return false;
    }

    boolean this_present_university = true && this.isSetUniversity();
    boolean that_present_university = true && that.isSetUniversity();
    if (this_present_university || that_present_university) {
      if (!(this_present_university && that_present_university))
        return false;
      if (!this.university.equals(that.university))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Course other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHolder()).compareTo(other.isSetHolder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHolder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.holder, other.holder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAutumn()).compareTo(other.isSetIsAutumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAutumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutumn, other.isAutumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseNumber()).compareTo(other.isSetCourseNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseNumber, other.courseNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUniversity()).compareTo(other.isSetUniversity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniversity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.university, other.university);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Course(");
    boolean first = true;

    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("holder:");
    if (this.holder == null) {
      sb.append("null");
    } else {
      sb.append(this.holder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAutumn:");
    sb.append(this.isAutumn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseNumber:");
    sb.append(this.courseNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("university:");
    if (this.university == null) {
      sb.append("null");
    } else {
      sb.append(this.university);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (holder != null) {
      holder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CourseStandardSchemeFactory implements SchemeFactory {
    public CourseStandardScheme getScheme() {
      return new CourseStandardScheme();
    }
  }

  private static class CourseStandardScheme extends StandardScheme<Course> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Course struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.year = iprot.readI64();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOLDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.holder = new Holder();
              struct.holder.read(iprot);
              struct.setHolderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_AUTUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAutumn = iprot.readBool();
              struct.setIsAutumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COURSE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.courseNumber = iprot.readByte();
              struct.setCourseNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNIVERSITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.university = iprot.readString();
              struct.setUniversityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Course struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI64(struct.year);
      oprot.writeFieldEnd();
      if (struct.holder != null) {
        oprot.writeFieldBegin(HOLDER_FIELD_DESC);
        struct.holder.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_AUTUMN_FIELD_DESC);
      oprot.writeBool(struct.isAutumn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COURSE_NUMBER_FIELD_DESC);
      oprot.writeByte(struct.courseNumber);
      oprot.writeFieldEnd();
      if (struct.university != null) {
        oprot.writeFieldBegin(UNIVERSITY_FIELD_DESC);
        oprot.writeString(struct.university);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CourseTupleSchemeFactory implements SchemeFactory {
    public CourseTupleScheme getScheme() {
      return new CourseTupleScheme();
    }
  }

  private static class CourseTupleScheme extends TupleScheme<Course> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Course struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubject()) {
        optionals.set(0);
      }
      if (struct.isSetYear()) {
        optionals.set(1);
      }
      if (struct.isSetHolder()) {
        optionals.set(2);
      }
      if (struct.isSetIsAutumn()) {
        optionals.set(3);
      }
      if (struct.isSetCourseNumber()) {
        optionals.set(4);
      }
      if (struct.isSetUniversity()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetYear()) {
        oprot.writeI64(struct.year);
      }
      if (struct.isSetHolder()) {
        struct.holder.write(oprot);
      }
      if (struct.isSetIsAutumn()) {
        oprot.writeBool(struct.isAutumn);
      }
      if (struct.isSetCourseNumber()) {
        oprot.writeByte(struct.courseNumber);
      }
      if (struct.isSetUniversity()) {
        oprot.writeString(struct.university);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Course struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(1)) {
        struct.year = iprot.readI64();
        struct.setYearIsSet(true);
      }
      if (incoming.get(2)) {
        struct.holder = new Holder();
        struct.holder.read(iprot);
        struct.setHolderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isAutumn = iprot.readBool();
        struct.setIsAutumnIsSet(true);
      }
      if (incoming.get(4)) {
        struct.courseNumber = iprot.readByte();
        struct.setCourseNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.university = iprot.readString();
        struct.setUniversityIsSet(true);
      }
    }
  }

}

