/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.lecturenotes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Subscriptions {

  public interface Iface {

    public boolean subscript(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException;

    public boolean unsubscript(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException;

    public List<String> getAllSubscriptions(org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.UserNotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void subscript(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unsubscript(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllSubscriptions(org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean subscript(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException
    {
      send_subscript(user, lectureId);
      return recv_subscript();
    }

    public void send_subscript(org.lecturenotes.types.Credentials user, String lectureId) throws org.apache.thrift.TException
    {
      subscript_args args = new subscript_args();
      args.setUser(user);
      args.setLectureId(lectureId);
      sendBase("subscript", args);
    }

    public boolean recv_subscript() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException
    {
      subscript_result result = new subscript_result();
      receiveBase(result, "subscript");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userNotFound != null) {
        throw result.userNotFound;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subscript failed: unknown result");
    }

    public boolean unsubscript(org.lecturenotes.types.Credentials user, String lectureId) throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException
    {
      send_unsubscript(user, lectureId);
      return recv_unsubscript();
    }

    public void send_unsubscript(org.lecturenotes.types.Credentials user, String lectureId) throws org.apache.thrift.TException
    {
      unsubscript_args args = new unsubscript_args();
      args.setUser(user);
      args.setLectureId(lectureId);
      sendBase("unsubscript", args);
    }

    public boolean recv_unsubscript() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException
    {
      unsubscript_result result = new unsubscript_result();
      receiveBase(result, "unsubscript");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userNotFound != null) {
        throw result.userNotFound;
      }
      if (result.lectureNotFound != null) {
        throw result.lectureNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unsubscript failed: unknown result");
    }

    public List<String> getAllSubscriptions(org.lecturenotes.types.Credentials user) throws org.lecturenotes.exceptions.UserNotFound, org.apache.thrift.TException
    {
      send_getAllSubscriptions(user);
      return recv_getAllSubscriptions();
    }

    public void send_getAllSubscriptions(org.lecturenotes.types.Credentials user) throws org.apache.thrift.TException
    {
      getAllSubscriptions_args args = new getAllSubscriptions_args();
      args.setUser(user);
      sendBase("getAllSubscriptions", args);
    }

    public List<String> recv_getAllSubscriptions() throws org.lecturenotes.exceptions.UserNotFound, org.apache.thrift.TException
    {
      getAllSubscriptions_result result = new getAllSubscriptions_result();
      receiveBase(result, "getAllSubscriptions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userNotFound != null) {
        throw result.userNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSubscriptions failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void subscript(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscript_call method_call = new subscript_call(user, lectureId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscript_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.lecturenotes.types.Credentials user;
      private String lectureId;
      public subscript_call(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.lectureId = lectureId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscript", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscript_args args = new subscript_args();
        args.setUser(user);
        args.setLectureId(lectureId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subscript();
      }
    }

    public void unsubscript(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unsubscript_call method_call = new unsubscript_call(user, lectureId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unsubscript_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.lecturenotes.types.Credentials user;
      private String lectureId;
      public unsubscript_call(org.lecturenotes.types.Credentials user, String lectureId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.lectureId = lectureId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unsubscript", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unsubscript_args args = new unsubscript_args();
        args.setUser(user);
        args.setLectureId(lectureId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.lecturenotes.exceptions.UserNotFound, org.lecturenotes.exceptions.LectureNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unsubscript();
      }
    }

    public void getAllSubscriptions(org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSubscriptions_call method_call = new getAllSubscriptions_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSubscriptions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.lecturenotes.types.Credentials user;
      public getAllSubscriptions_call(org.lecturenotes.types.Credentials user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSubscriptions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSubscriptions_args args = new getAllSubscriptions_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.lecturenotes.exceptions.UserNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSubscriptions();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("subscript", new subscript());
      processMap.put("unsubscript", new unsubscript());
      processMap.put("getAllSubscriptions", new getAllSubscriptions());
      return processMap;
    }

    public static class subscript<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscript_args> {
      public subscript() {
        super("subscript");
      }

      public subscript_args getEmptyArgsInstance() {
        return new subscript_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public subscript_result getResult(I iface, subscript_args args) throws org.apache.thrift.TException {
        subscript_result result = new subscript_result();
        try {
          result.success = iface.subscript(args.user, args.lectureId);
          result.setSuccessIsSet(true);
        } catch (org.lecturenotes.exceptions.UserNotFound userNotFound) {
          result.userNotFound = userNotFound;
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        }
        return result;
      }
    }

    public static class unsubscript<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unsubscript_args> {
      public unsubscript() {
        super("unsubscript");
      }

      public unsubscript_args getEmptyArgsInstance() {
        return new unsubscript_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unsubscript_result getResult(I iface, unsubscript_args args) throws org.apache.thrift.TException {
        unsubscript_result result = new unsubscript_result();
        try {
          result.success = iface.unsubscript(args.user, args.lectureId);
          result.setSuccessIsSet(true);
        } catch (org.lecturenotes.exceptions.UserNotFound userNotFound) {
          result.userNotFound = userNotFound;
        } catch (org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
          result.lectureNotFound = lectureNotFound;
        }
        return result;
      }
    }

    public static class getAllSubscriptions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSubscriptions_args> {
      public getAllSubscriptions() {
        super("getAllSubscriptions");
      }

      public getAllSubscriptions_args getEmptyArgsInstance() {
        return new getAllSubscriptions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllSubscriptions_result getResult(I iface, getAllSubscriptions_args args) throws org.apache.thrift.TException {
        getAllSubscriptions_result result = new getAllSubscriptions_result();
        try {
          result.success = iface.getAllSubscriptions(args.user);
        } catch (org.lecturenotes.exceptions.UserNotFound userNotFound) {
          result.userNotFound = userNotFound;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("subscript", new subscript());
      processMap.put("unsubscript", new unsubscript());
      processMap.put("getAllSubscriptions", new getAllSubscriptions());
      return processMap;
    }

    public static class subscript<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscript_args, Boolean> {
      public subscript() {
        super("subscript");
      }

      public subscript_args getEmptyArgsInstance() {
        return new subscript_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            subscript_result result = new subscript_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            subscript_result result = new subscript_result();
            if (e instanceof org.lecturenotes.exceptions.UserNotFound) {
                        result.userNotFound = (org.lecturenotes.exceptions.UserNotFound) e;
                        result.setUserNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subscript_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.subscript(args.user, args.lectureId,resultHandler);
      }
    }

    public static class unsubscript<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unsubscript_args, Boolean> {
      public unsubscript() {
        super("unsubscript");
      }

      public unsubscript_args getEmptyArgsInstance() {
        return new unsubscript_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            unsubscript_result result = new unsubscript_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unsubscript_result result = new unsubscript_result();
            if (e instanceof org.lecturenotes.exceptions.UserNotFound) {
                        result.userNotFound = (org.lecturenotes.exceptions.UserNotFound) e;
                        result.setUserNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.lecturenotes.exceptions.LectureNotFound) {
                        result.lectureNotFound = (org.lecturenotes.exceptions.LectureNotFound) e;
                        result.setLectureNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unsubscript_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.unsubscript(args.user, args.lectureId,resultHandler);
      }
    }

    public static class getAllSubscriptions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSubscriptions_args, List<String>> {
      public getAllSubscriptions() {
        super("getAllSubscriptions");
      }

      public getAllSubscriptions_args getEmptyArgsInstance() {
        return new getAllSubscriptions_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAllSubscriptions_result result = new getAllSubscriptions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllSubscriptions_result result = new getAllSubscriptions_result();
            if (e instanceof org.lecturenotes.exceptions.UserNotFound) {
                        result.userNotFound = (org.lecturenotes.exceptions.UserNotFound) e;
                        result.setUserNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSubscriptions_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAllSubscriptions(args.user,resultHandler);
      }
    }

  }

  public static class subscript_args implements org.apache.thrift.TBase<subscript_args, subscript_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscript_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscript_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscript_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscript_argsTupleSchemeFactory());
    }

    public org.lecturenotes.types.Credentials user; // required
    public String lectureId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      LECTURE_ID((short)2, "lectureId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // LECTURE_ID
            return LECTURE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscript_args.class, metaDataMap);
    }

    public subscript_args() {
    }

    public subscript_args(
      org.lecturenotes.types.Credentials user,
      String lectureId)
    {
      this();
      this.user = user;
      this.lectureId = lectureId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscript_args(subscript_args other) {
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
    }

    public subscript_args deepCopy() {
      return new subscript_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.lectureId = null;
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public subscript_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public subscript_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case LECTURE_ID:
        return getLectureId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case LECTURE_ID:
        return isSetLectureId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscript_args)
        return this.equals((subscript_args)that);
      return false;
    }

    public boolean equals(subscript_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(subscript_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscript_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscript_argsStandardSchemeFactory implements SchemeFactory {
      public subscript_argsStandardScheme getScheme() {
        return new subscript_argsStandardScheme();
      }
    }

    private static class subscript_argsStandardScheme extends StandardScheme<subscript_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscript_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscript_argsTupleSchemeFactory implements SchemeFactory {
      public subscript_argsTupleScheme getScheme() {
        return new subscript_argsTupleScheme();
      }
    }

    private static class subscript_argsTupleScheme extends TupleScheme<subscript_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscript_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetLectureId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscript_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
      }
    }

  }

  public static class subscript_result implements org.apache.thrift.TBase<subscript_result, subscript_result._Fields>, java.io.Serializable, Cloneable, Comparable<subscript_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscript_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField USER_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("userNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscript_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscript_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.lecturenotes.exceptions.UserNotFound userNotFound; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_NOT_FOUND((short)1, "userNotFound"),
      LECTURE_NOT_FOUND((short)2, "lectureNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_NOT_FOUND
            return USER_NOT_FOUND;
          case 2: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.USER_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("userNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscript_result.class, metaDataMap);
    }

    public subscript_result() {
    }

    public subscript_result(
      boolean success,
      org.lecturenotes.exceptions.UserNotFound userNotFound,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userNotFound = userNotFound;
      this.lectureNotFound = lectureNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscript_result(subscript_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUserNotFound()) {
        this.userNotFound = new org.lecturenotes.exceptions.UserNotFound(other.userNotFound);
      }
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
    }

    public subscript_result deepCopy() {
      return new subscript_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.userNotFound = null;
      this.lectureNotFound = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public subscript_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.lecturenotes.exceptions.UserNotFound getUserNotFound() {
      return this.userNotFound;
    }

    public subscript_result setUserNotFound(org.lecturenotes.exceptions.UserNotFound userNotFound) {
      this.userNotFound = userNotFound;
      return this;
    }

    public void unsetUserNotFound() {
      this.userNotFound = null;
    }

    /** Returns true if field userNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetUserNotFound() {
      return this.userNotFound != null;
    }

    public void setUserNotFoundIsSet(boolean value) {
      if (!value) {
        this.userNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public subscript_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case USER_NOT_FOUND:
        if (value == null) {
          unsetUserNotFound();
        } else {
          setUserNotFound((org.lecturenotes.exceptions.UserNotFound)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case USER_NOT_FOUND:
        return getUserNotFound();

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_NOT_FOUND:
        return isSetUserNotFound();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscript_result)
        return this.equals((subscript_result)that);
      return false;
    }

    public boolean equals(subscript_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userNotFound = true && this.isSetUserNotFound();
      boolean that_present_userNotFound = true && that.isSetUserNotFound();
      if (this_present_userNotFound || that_present_userNotFound) {
        if (!(this_present_userNotFound && that_present_userNotFound))
          return false;
        if (!this.userNotFound.equals(that.userNotFound))
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(subscript_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserNotFound()).compareTo(other.isSetUserNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNotFound, other.userNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscript_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userNotFound:");
      if (this.userNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.userNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscript_resultStandardSchemeFactory implements SchemeFactory {
      public subscript_resultStandardScheme getScheme() {
        return new subscript_resultStandardScheme();
      }
    }

    private static class subscript_resultStandardScheme extends StandardScheme<subscript_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscript_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USER_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
                struct.userNotFound.read(iprot);
                struct.setUserNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscript_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.userNotFound != null) {
          oprot.writeFieldBegin(USER_NOT_FOUND_FIELD_DESC);
          struct.userNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscript_resultTupleSchemeFactory implements SchemeFactory {
      public subscript_resultTupleScheme getScheme() {
        return new subscript_resultTupleScheme();
      }
    }

    private static class subscript_resultTupleScheme extends TupleScheme<subscript_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscript_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUserNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUserNotFound()) {
          struct.userNotFound.write(oprot);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscript_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
          struct.userNotFound.read(iprot);
          struct.setUserNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
      }
    }

  }

  public static class unsubscript_args implements org.apache.thrift.TBase<unsubscript_args, unsubscript_args._Fields>, java.io.Serializable, Cloneable, Comparable<unsubscript_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unsubscript_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unsubscript_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unsubscript_argsTupleSchemeFactory());
    }

    public org.lecturenotes.types.Credentials user; // required
    public String lectureId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      LECTURE_ID((short)2, "lectureId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // LECTURE_ID
            return LECTURE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      tmpMap.put(_Fields.LECTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("lectureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unsubscript_args.class, metaDataMap);
    }

    public unsubscript_args() {
    }

    public unsubscript_args(
      org.lecturenotes.types.Credentials user,
      String lectureId)
    {
      this();
      this.user = user;
      this.lectureId = lectureId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsubscript_args(unsubscript_args other) {
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
      if (other.isSetLectureId()) {
        this.lectureId = other.lectureId;
      }
    }

    public unsubscript_args deepCopy() {
      return new unsubscript_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.lectureId = null;
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public unsubscript_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getLectureId() {
      return this.lectureId;
    }

    public unsubscript_args setLectureId(String lectureId) {
      this.lectureId = lectureId;
      return this;
    }

    public void unsetLectureId() {
      this.lectureId = null;
    }

    /** Returns true if field lectureId is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureId() {
      return this.lectureId != null;
    }

    public void setLectureIdIsSet(boolean value) {
      if (!value) {
        this.lectureId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      case LECTURE_ID:
        if (value == null) {
          unsetLectureId();
        } else {
          setLectureId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case LECTURE_ID:
        return getLectureId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case LECTURE_ID:
        return isSetLectureId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsubscript_args)
        return this.equals((unsubscript_args)that);
      return false;
    }

    public boolean equals(unsubscript_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_lectureId = true && this.isSetLectureId();
      boolean that_present_lectureId = true && that.isSetLectureId();
      if (this_present_lectureId || that_present_lectureId) {
        if (!(this_present_lectureId && that_present_lectureId))
          return false;
        if (!this.lectureId.equals(that.lectureId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unsubscript_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureId()).compareTo(other.isSetLectureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureId, other.lectureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unsubscript_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureId:");
      if (this.lectureId == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unsubscript_argsStandardSchemeFactory implements SchemeFactory {
      public unsubscript_argsStandardScheme getScheme() {
        return new unsubscript_argsStandardScheme();
      }
    }

    private static class unsubscript_argsStandardScheme extends StandardScheme<unsubscript_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unsubscript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lectureId = iprot.readString();
                struct.setLectureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unsubscript_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureId != null) {
          oprot.writeFieldBegin(LECTURE_ID_FIELD_DESC);
          oprot.writeString(struct.lectureId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unsubscript_argsTupleSchemeFactory implements SchemeFactory {
      public unsubscript_argsTupleScheme getScheme() {
        return new unsubscript_argsTupleScheme();
      }
    }

    private static class unsubscript_argsTupleScheme extends TupleScheme<unsubscript_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unsubscript_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetLectureId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
        if (struct.isSetLectureId()) {
          oprot.writeString(struct.lectureId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unsubscript_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lectureId = iprot.readString();
          struct.setLectureIdIsSet(true);
        }
      }
    }

  }

  public static class unsubscript_result implements org.apache.thrift.TBase<unsubscript_result, unsubscript_result._Fields>, java.io.Serializable, Cloneable, Comparable<unsubscript_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unsubscript_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField USER_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("userNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LECTURE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unsubscript_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unsubscript_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.lecturenotes.exceptions.UserNotFound userNotFound; // required
    public org.lecturenotes.exceptions.LectureNotFound lectureNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_NOT_FOUND((short)1, "userNotFound"),
      LECTURE_NOT_FOUND((short)2, "lectureNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_NOT_FOUND
            return USER_NOT_FOUND;
          case 2: // LECTURE_NOT_FOUND
            return LECTURE_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.USER_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("userNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LECTURE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("lectureNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unsubscript_result.class, metaDataMap);
    }

    public unsubscript_result() {
    }

    public unsubscript_result(
      boolean success,
      org.lecturenotes.exceptions.UserNotFound userNotFound,
      org.lecturenotes.exceptions.LectureNotFound lectureNotFound)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userNotFound = userNotFound;
      this.lectureNotFound = lectureNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsubscript_result(unsubscript_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUserNotFound()) {
        this.userNotFound = new org.lecturenotes.exceptions.UserNotFound(other.userNotFound);
      }
      if (other.isSetLectureNotFound()) {
        this.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound(other.lectureNotFound);
      }
    }

    public unsubscript_result deepCopy() {
      return new unsubscript_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.userNotFound = null;
      this.lectureNotFound = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unsubscript_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.lecturenotes.exceptions.UserNotFound getUserNotFound() {
      return this.userNotFound;
    }

    public unsubscript_result setUserNotFound(org.lecturenotes.exceptions.UserNotFound userNotFound) {
      this.userNotFound = userNotFound;
      return this;
    }

    public void unsetUserNotFound() {
      this.userNotFound = null;
    }

    /** Returns true if field userNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetUserNotFound() {
      return this.userNotFound != null;
    }

    public void setUserNotFoundIsSet(boolean value) {
      if (!value) {
        this.userNotFound = null;
      }
    }

    public org.lecturenotes.exceptions.LectureNotFound getLectureNotFound() {
      return this.lectureNotFound;
    }

    public unsubscript_result setLectureNotFound(org.lecturenotes.exceptions.LectureNotFound lectureNotFound) {
      this.lectureNotFound = lectureNotFound;
      return this;
    }

    public void unsetLectureNotFound() {
      this.lectureNotFound = null;
    }

    /** Returns true if field lectureNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetLectureNotFound() {
      return this.lectureNotFound != null;
    }

    public void setLectureNotFoundIsSet(boolean value) {
      if (!value) {
        this.lectureNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case USER_NOT_FOUND:
        if (value == null) {
          unsetUserNotFound();
        } else {
          setUserNotFound((org.lecturenotes.exceptions.UserNotFound)value);
        }
        break;

      case LECTURE_NOT_FOUND:
        if (value == null) {
          unsetLectureNotFound();
        } else {
          setLectureNotFound((org.lecturenotes.exceptions.LectureNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case USER_NOT_FOUND:
        return getUserNotFound();

      case LECTURE_NOT_FOUND:
        return getLectureNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_NOT_FOUND:
        return isSetUserNotFound();
      case LECTURE_NOT_FOUND:
        return isSetLectureNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsubscript_result)
        return this.equals((unsubscript_result)that);
      return false;
    }

    public boolean equals(unsubscript_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userNotFound = true && this.isSetUserNotFound();
      boolean that_present_userNotFound = true && that.isSetUserNotFound();
      if (this_present_userNotFound || that_present_userNotFound) {
        if (!(this_present_userNotFound && that_present_userNotFound))
          return false;
        if (!this.userNotFound.equals(that.userNotFound))
          return false;
      }

      boolean this_present_lectureNotFound = true && this.isSetLectureNotFound();
      boolean that_present_lectureNotFound = true && that.isSetLectureNotFound();
      if (this_present_lectureNotFound || that_present_lectureNotFound) {
        if (!(this_present_lectureNotFound && that_present_lectureNotFound))
          return false;
        if (!this.lectureNotFound.equals(that.lectureNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unsubscript_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserNotFound()).compareTo(other.isSetUserNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNotFound, other.userNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLectureNotFound()).compareTo(other.isSetLectureNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLectureNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureNotFound, other.lectureNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unsubscript_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userNotFound:");
      if (this.userNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.userNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lectureNotFound:");
      if (this.lectureNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.lectureNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unsubscript_resultStandardSchemeFactory implements SchemeFactory {
      public unsubscript_resultStandardScheme getScheme() {
        return new unsubscript_resultStandardScheme();
      }
    }

    private static class unsubscript_resultStandardScheme extends StandardScheme<unsubscript_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unsubscript_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USER_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
                struct.userNotFound.read(iprot);
                struct.setUserNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LECTURE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
                struct.lectureNotFound.read(iprot);
                struct.setLectureNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unsubscript_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.userNotFound != null) {
          oprot.writeFieldBegin(USER_NOT_FOUND_FIELD_DESC);
          struct.userNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lectureNotFound != null) {
          oprot.writeFieldBegin(LECTURE_NOT_FOUND_FIELD_DESC);
          struct.lectureNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unsubscript_resultTupleSchemeFactory implements SchemeFactory {
      public unsubscript_resultTupleScheme getScheme() {
        return new unsubscript_resultTupleScheme();
      }
    }

    private static class unsubscript_resultTupleScheme extends TupleScheme<unsubscript_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unsubscript_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUserNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetLectureNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUserNotFound()) {
          struct.userNotFound.write(oprot);
        }
        if (struct.isSetLectureNotFound()) {
          struct.lectureNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unsubscript_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
          struct.userNotFound.read(iprot);
          struct.setUserNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lectureNotFound = new org.lecturenotes.exceptions.LectureNotFound();
          struct.lectureNotFound.read(iprot);
          struct.setLectureNotFoundIsSet(true);
        }
      }
    }

  }

  public static class getAllSubscriptions_args implements org.apache.thrift.TBase<getAllSubscriptions_args, getAllSubscriptions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSubscriptions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSubscriptions_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSubscriptions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSubscriptions_argsTupleSchemeFactory());
    }

    public org.lecturenotes.types.Credentials user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.lecturenotes.types.Credentials.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSubscriptions_args.class, metaDataMap);
    }

    public getAllSubscriptions_args() {
    }

    public getAllSubscriptions_args(
      org.lecturenotes.types.Credentials user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSubscriptions_args(getAllSubscriptions_args other) {
      if (other.isSetUser()) {
        this.user = new org.lecturenotes.types.Credentials(other.user);
      }
    }

    public getAllSubscriptions_args deepCopy() {
      return new getAllSubscriptions_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public org.lecturenotes.types.Credentials getUser() {
      return this.user;
    }

    public getAllSubscriptions_args setUser(org.lecturenotes.types.Credentials user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((org.lecturenotes.types.Credentials)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSubscriptions_args)
        return this.equals((getAllSubscriptions_args)that);
      return false;
    }

    public boolean equals(getAllSubscriptions_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSubscriptions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSubscriptions_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSubscriptions_argsStandardSchemeFactory implements SchemeFactory {
      public getAllSubscriptions_argsStandardScheme getScheme() {
        return new getAllSubscriptions_argsStandardScheme();
      }
    }

    private static class getAllSubscriptions_argsStandardScheme extends StandardScheme<getAllSubscriptions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSubscriptions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new org.lecturenotes.types.Credentials();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSubscriptions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSubscriptions_argsTupleSchemeFactory implements SchemeFactory {
      public getAllSubscriptions_argsTupleScheme getScheme() {
        return new getAllSubscriptions_argsTupleScheme();
      }
    }

    private static class getAllSubscriptions_argsTupleScheme extends TupleScheme<getAllSubscriptions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSubscriptions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSubscriptions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new org.lecturenotes.types.Credentials();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class getAllSubscriptions_result implements org.apache.thrift.TBase<getAllSubscriptions_result, getAllSubscriptions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSubscriptions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSubscriptions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField USER_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("userNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSubscriptions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSubscriptions_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.lecturenotes.exceptions.UserNotFound userNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_NOT_FOUND((short)1, "userNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_NOT_FOUND
            return USER_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("userNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSubscriptions_result.class, metaDataMap);
    }

    public getAllSubscriptions_result() {
    }

    public getAllSubscriptions_result(
      List<String> success,
      org.lecturenotes.exceptions.UserNotFound userNotFound)
    {
      this();
      this.success = success;
      this.userNotFound = userNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSubscriptions_result(getAllSubscriptions_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetUserNotFound()) {
        this.userNotFound = new org.lecturenotes.exceptions.UserNotFound(other.userNotFound);
      }
    }

    public getAllSubscriptions_result deepCopy() {
      return new getAllSubscriptions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.userNotFound = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAllSubscriptions_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.lecturenotes.exceptions.UserNotFound getUserNotFound() {
      return this.userNotFound;
    }

    public getAllSubscriptions_result setUserNotFound(org.lecturenotes.exceptions.UserNotFound userNotFound) {
      this.userNotFound = userNotFound;
      return this;
    }

    public void unsetUserNotFound() {
      this.userNotFound = null;
    }

    /** Returns true if field userNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetUserNotFound() {
      return this.userNotFound != null;
    }

    public void setUserNotFoundIsSet(boolean value) {
      if (!value) {
        this.userNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case USER_NOT_FOUND:
        if (value == null) {
          unsetUserNotFound();
        } else {
          setUserNotFound((org.lecturenotes.exceptions.UserNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_NOT_FOUND:
        return getUserNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_NOT_FOUND:
        return isSetUserNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSubscriptions_result)
        return this.equals((getAllSubscriptions_result)that);
      return false;
    }

    public boolean equals(getAllSubscriptions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userNotFound = true && this.isSetUserNotFound();
      boolean that_present_userNotFound = true && that.isSetUserNotFound();
      if (this_present_userNotFound || that_present_userNotFound) {
        if (!(this_present_userNotFound && that_present_userNotFound))
          return false;
        if (!this.userNotFound.equals(that.userNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSubscriptions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserNotFound()).compareTo(other.isSetUserNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNotFound, other.userNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSubscriptions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userNotFound:");
      if (this.userNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.userNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSubscriptions_resultStandardSchemeFactory implements SchemeFactory {
      public getAllSubscriptions_resultStandardScheme getScheme() {
        return new getAllSubscriptions_resultStandardScheme();
      }
    }

    private static class getAllSubscriptions_resultStandardScheme extends StandardScheme<getAllSubscriptions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSubscriptions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USER_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
                struct.userNotFound.read(iprot);
                struct.setUserNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSubscriptions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userNotFound != null) {
          oprot.writeFieldBegin(USER_NOT_FOUND_FIELD_DESC);
          struct.userNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSubscriptions_resultTupleSchemeFactory implements SchemeFactory {
      public getAllSubscriptions_resultTupleScheme getScheme() {
        return new getAllSubscriptions_resultTupleScheme();
      }
    }

    private static class getAllSubscriptions_resultTupleScheme extends TupleScheme<getAllSubscriptions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSubscriptions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUserNotFound()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetUserNotFound()) {
          struct.userNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSubscriptions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userNotFound = new org.lecturenotes.exceptions.UserNotFound();
          struct.userNotFound.read(iprot);
          struct.setUserNotFoundIsSet(true);
        }
      }
    }

  }

}
